(window.webpackJsonp=window.webpackJsonp||[]).push([[349],{1175:function(t,s,a){"use strict";a.r(s);var r=a(15),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"实战测试题三"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实战测试题三"}},[t._v("#")]),t._v(" 实战测试题三")]),t._v(" "),a("p",[t._v("我们知道，CPU 资源是有限的，任务的处理速度与线程个数并不是线性正相关。相反，过多的线程反而会导致 CPU 频繁切换，处理性能下降。所以，线程池的大小一般都是综合考虑要处理任务的特点和硬件环境，来事先设置的。")]),t._v(" "),a("p",[a("strong",[t._v("当我们向固定大小的线程池中请求一个线程时，如果线程池中没有空闲资源了，这个时候线程池如何处理这个请求？是拒绝请求还是排队请求？各种处理策略又是怎么实现的呢？")])]),t._v(" "),a("h1",{attrs:{id:"题目解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题目解析"}},[t._v("#")]),t._v(" 题目解析")]),t._v(" "),a("p",[t._v("这个问题的答案涉及队列这种数据结构。队列可以应用在任何有限资源池中，用于排队请求，比如数据库连接池等。实际上，对于大部分资源有限的场景，当没有空闲资源时，基本上都可以通过“队列”这种数据结构来实现请求排队。")]),t._v(" "),a("p",[t._v("这个问题的具体答案，在队列那一节我已经讲得非常详细了，你可以回去看看，这里我就不赘述了。")])])}),[],!1,null,null,null);s.default=e.exports}}]);