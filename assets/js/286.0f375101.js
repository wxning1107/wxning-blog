(window.webpackJsonp=window.webpackJsonp||[]).push([[286],{1031:function(t,e,s){"use strict";s.r(e);var a=s(15),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"redis数据类型使用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis数据类型使用场景"}},[t._v("#")]),t._v(" Redis数据类型使用场景？")]),t._v(" "),s("h1",{attrs:{id:"string-字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-字符串"}},[t._v("#")]),t._v(" String(字符串)")]),t._v(" "),s("p",[t._v("1.缓存功能：适合最简单的k-v存储，类似于memcached的存储结构，例如短信验证码")]),t._v(" "),s("p",[t._v("2.计数器：可以对 String 进行自增自减运算，从而实现计数器功能。Redis 这种内存型数据库的读写性能非常高，很适合存储频繁读写的计数量。")]),t._v(" "),s("p",[t._v("3.共享用户Session")]),t._v(" "),s("h1",{attrs:{id:"hash-字典"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hash-字典"}},[t._v("#")]),t._v(" Hash(字典)")]),t._v(" "),s("p",[t._v("1.一般可以将结构化的数据，比如一个对象给缓存在 Redis 里，然后每次读写缓存的时候，可以就操作 Hash 里的某个字段。")]),t._v(" "),s("p",[t._v("2.存储，读取修改用户属性。")]),t._v(" "),s("p",[t._v("3.一般key为ID或者唯一标示，value对应的就是详情了。如商品详情，个人信息详情，新闻详情等。")]),t._v(" "),s("h1",{attrs:{id:"list-列表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list-列表"}},[t._v("#")]),t._v(" List(列表)")]),t._v(" "),s("p",[t._v("1.存储一些列表型的数据结构，类似粉丝列表、文章的评论列表之类。")]),t._v(" "),s("p",[t._v("2.比如可以通过 lrange 命令，读取某个闭区间内的元素，可以基于 List 实现分页查询，这个是很棒的一个功能，基于 Redis 实现简单的高性能分页，可以做类似微博那种下拉不断分页的东西，性能高，就一页一页走。")]),t._v(" "),s("p",[t._v("3.也可以做个简单的消息队列")]),t._v(" "),s("h1",{attrs:{id:"set-集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set-集合"}},[t._v("#")]),t._v(" Set(集合)")]),t._v(" "),s("p",[t._v("1.直接基于 Set 将系统里需要去重的数据扔进去，自动就给去重了，如果你需要对一些数据进行快速的全局去重，你当然也可以基于 JVM 内存里的 HashSet 进行去重，但是如果你的某个系统部署在多台机器上呢？得基于Redis进行全局的 Set 去重。")]),t._v(" "),s("p",[t._v("2.共同好友：可以基于 Set 玩儿交集、并集、差集的操作，比如交集吧，我们可以把两个人的好友列表整一个交集，看看俩人的共同好友是谁。")]),t._v(" "),s("p",[t._v("3.还有一个比较典型的场景是标签（tag），例如一个用户可能对娱乐，体育比较感兴趣，另一个用户对历史，新闻比较感兴趣，这些兴趣点就是标签，有了这些数据就可以得到喜欢同一个标签的人，以及用户的共同喜欢标签")]),t._v(" "),s("h1",{attrs:{id:"sorted-set-有序集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sorted-set-有序集合"}},[t._v("#")]),t._v(" Sorted Set(有序集合)")]),t._v(" "),s("p",[t._v("1.排行榜：有序集合经典使用场景。例如视频网站需要对用户上传的视频做排行榜，榜单维护可能是多方面：按照时间、按照播放量、按照获得的赞数等。\n2.用Sorted Sets来做带权重的队列，比如普通消息的score为1，重要消息的score为2，然后工作线程可以选择按score的倒序来获取工作任务。让重要的任务优先执行。")]),t._v(" "),s("h1",{attrs:{id:"bitmap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bitmap"}},[t._v("#")]),t._v(" Bitmap")]),t._v(" "),s("p",[t._v("用法可见"),s("a",{attrs:{href:"http://polygonx.top/wxning-blog/interview/Redis-questions/notes/00/09.html",target:"_blank",rel:"noopener noreferrer"}},[t._v('"二值状态统计怎么设计？"'),s("OutboundLink")],1),t._v("这篇文章")]),t._v(" "),s("h1",{attrs:{id:"hyperloglog"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hyperloglog"}},[t._v("#")]),t._v(" HyperLogLog")]),t._v(" "),s("p",[t._v("用法可见"),s("a",{attrs:{href:"http://polygonx.top/wxning-blog/interview/Redis-questions/notes/00/10.html",target:"_blank",rel:"noopener noreferrer"}},[t._v('"基数统计怎么设计？"'),s("OutboundLink")],1),t._v("这篇文章")]),t._v(" "),s("h1",{attrs:{id:"pub-sub"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pub-sub"}},[t._v("#")]),t._v(" pub/sub")]),t._v(" "),s("p",[t._v("发布订阅模式")]),t._v(" "),s("h1",{attrs:{id:"geo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#geo"}},[t._v("#")]),t._v(" GEO")]),t._v(" "),s("p",[t._v("GEO(地理信息定位)是Redis3.2版本发布的功能，存储经纬度，计算两地距离，范围计算等，类型本质是zset。")]),t._v(" "),s("h1",{attrs:{id:"pipeline"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pipeline"}},[t._v("#")]),t._v(" Pipeline")]),t._v(" "),s("p",[t._v("可以批量执行一组指令，一次性返回全部结果，可以减少频繁的请求应答。")])])}),[],!1,null,null,null);e.default=r.exports}}]);