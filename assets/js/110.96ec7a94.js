(window.webpackJsonp=window.webpackJsonp||[]).push([[110],{1146:function(e,t,s){"use strict";s.r(t);var o=s(15),a=Object(o.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"一条sql更新语句是如何执行的"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#一条sql更新语句是如何执行的"}},[e._v("#")]),e._v(" 一条SQL更新语句是如何执行的？")]),e._v(" "),o("div",{staticClass:"language-sh line-numbers-mode"},[o("pre",{pre:!0,attrs:{class:"language-sh"}},[o("code",[e._v("mysql"),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" create table T"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("ID int primary key, c int"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\nmysql"),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" update T "),o("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("c")]),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("c+1 where "),o("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("ID")]),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),o("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),o("div",{staticClass:"line-numbers-wrapper"},[o("span",{staticClass:"line-number"},[e._v("1")]),o("br"),o("span",{staticClass:"line-number"},[e._v("2")]),o("br")])]),o("p",[e._v("这条更新语句是怎么执行的呢？")]),e._v(" "),o("p",[e._v("你执行语句前要先连接数据库，这是连接器的工作。")]),e._v(" "),o("p",[e._v("前面我们说过，在一个表上有更新的时候，跟这个表有关的查询缓存会失效，所以这条语句就会把表 T 上所有缓存结果都清空。这也就是我们一般不建议使用查询缓存的原因。")]),e._v(" "),o("p",[e._v("接下来，分析器会通过词法和语法解析知道这是一条更新语句。优化器决定要使用 ID 这个索引。然后，执行器负责具体执行，找到这一行，然后更新。")]),e._v(" "),o("p",[e._v("与查询流程不一样的是，更新流程还涉及两个重要的日志模块，redo log（重做日志）和 binlog（归档日志）。")]),e._v(" "),o("h1",{attrs:{id:"redo-log"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#redo-log"}},[e._v("#")]),e._v(" redo log")]),e._v(" "),o("p",[e._v("在 MySQL 里如果每一次的更新操作都需要写进磁盘，然后磁盘也要找到对应的那条记录，然后再更新，整个过程 IO 成本、查找成本都很高。为了解决这个问题，MySQL 使用 WAL 技术（Write-Ahead Logging），它的关键点就是先写日志，再写磁盘。")]),e._v(" "),o("p",[e._v("具体来说，当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 redo log 里面，并更新内存，这个时候更新就算完成了。同时，InnoDB 引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做。")]),e._v(" "),o("p",[e._v("InnoDB 的 redo log 是固定大小的，比如可以配置为一组 4 个文件，每个文件的大小是 1GB，那么这块“粉板”总共就可以记录 4GB 的操作。从头开始写，写到末尾就又回到开头循环写，如下面这个图所示。")]),e._v(" "),o("p",[o("img",{attrs:{src:s(827),alt:"img"}})]),e._v(" "),o("p",[e._v("write pos 是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件开头。checkpoint 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。")]),e._v(" "),o("p",[e._v("write pos 和 checkpoint 之间的是“粉板”上还空着的部分，可以用来记录新的操作。如果 write pos 追上 checkpoint，表示“粉板”满了，这时候不能再执行新的更新，得停下来先擦掉一些记录，把 checkpoint 推进一下。")]),e._v(" "),o("p",[e._v("有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为"),o("strong",[e._v("crash-safe")]),e._v("。")]),e._v(" "),o("h1",{attrs:{id:"binlog"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#binlog"}},[e._v("#")]),e._v(" binlog")]),e._v(" "),o("p",[e._v("MySQL 整体来看，其实就有两块：一块是 Server 层，它主要做的是 MySQL 功能层面的事情；还有一块是引擎层，负责存储相关的具体事宜。上面我们聊到的 redo log 是 InnoDB 引擎特有的日志，而 Server 层也有自己的日志，称为 binlog（归档日志）。")]),e._v(" "),o("p",[e._v("这两种日志有以下三点不同。")]),e._v(" "),o("ul",[o("li",[o("p",[e._v("redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。")])]),e._v(" "),o("li",[o("p",[e._v("redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID=2 这一行的 c 字段加 1 ”。")])]),e._v(" "),o("li",[o("p",[e._v("redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。")])])]),e._v(" "),o("p",[e._v("我们再来看执行器和 InnoDB 引擎在执行这个简单的 update 语句时的内部流程：")]),e._v(" "),o("ul",[o("li",[o("p",[e._v("执行器先找引擎取 ID=2 这一行。ID 是主键，引擎直接用树搜索找到这一行。如果 ID=2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。")])]),e._v(" "),o("li",[o("p",[e._v("执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到新的一行数据，再调用引擎接口写入这行新数据。")])]),e._v(" "),o("li",[o("p",[e._v("引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态。然后告知执行器执行完成了，随时可以提交事务。")])]),e._v(" "),o("li",[o("p",[e._v("执行器生成这个操作的 binlog，并把 binlog 写入磁盘。")])]),e._v(" "),o("li",[o("p",[e._v("执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成。")])])]),e._v(" "),o("p",[o("img",{attrs:{src:s(828),alt:"img"}})]),e._v(" "),o("p",[e._v('将 redo log 的写入拆成了两个步骤：prepare 和 commit，这就是"两阶段提交"。')]),e._v(" "),o("h1",{attrs:{id:"两阶段提交"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#两阶段提交"}},[e._v("#")]),e._v(" 两阶段提交")]),e._v(" "),o("p",[e._v("为什么必须有“两阶段提交”呢？这是为了让两份日志之间的逻辑一致。")]),e._v(" "),o("p",[e._v("由于 redo log 和 binlog 是两个独立的逻辑，如果不用两阶段提交，要么就是先写完 redo log 再写 binlog，或者采用反过来的顺序。我们看看这两种方式会有什么问题。仍然用前面的 update 语句来做例子。假设当前 ID=2 的行，字段 c 的值是 0，再假设执行 update 语句过程中在写完第一个日志后，第二个日志还没有写完期间发生了 crash，会出现什么情况呢？")]),e._v(" "),o("ul",[o("li",[o("p",[e._v("先写 redo log 后写 binlog。假设在 redo log 写完，binlog 还没有写完的时候，MySQL 进程异常重启。由于 redo log 写完之后，系统即使崩溃，仍然能够把数据恢复回来，所以恢复后这一行 c 的值是 1。但是由于 binlog 没写完就 crash 了，这时候 binlog 里面就没有记录这个语句。因此，之后备份日志的时候，存起来的 binlog 里面就没有这条语句。然后你会发现，如果需要用这个 binlog 来恢复临时库的话，由于这个语句的 binlog 丢失，这个临时库就会少了这一次更新，恢复出来的这一行 c 的值就是 0，与原库的值不同。")])]),e._v(" "),o("li",[o("p",[e._v("先写 binlog 后写 redo log。如果在 binlog 写完之后 crash，由于 redo log 还没写，崩溃恢复以后这个事务无效，所以这一行 c 的值是 0。但是 binlog 里面已经记录了“把 c 从 0 改成 1”这个日志。所以，在之后用 binlog 来恢复的时候就多了一个事务出来，恢复出来的这一行 c 的值就是 1，与原库的值不同。")])])]),e._v(" "),o("p",[e._v("可以看到，如果不使用“两阶段提交”，那么数据库的状态就有可能和用它的日志恢复出来的库的状态不一致。而两阶段提交就是让这两个状态保持逻辑上的一致。")])])}),[],!1,null,null,null);t.default=a.exports},827:function(e,t,s){e.exports=s.p+"assets/img/image-20211128082755138.eb0f5253.png"},828:function(e,t,s){e.exports=s.p+"assets/img/image-20211128083715595.1d76aedb.png"}}]);