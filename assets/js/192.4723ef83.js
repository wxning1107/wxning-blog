(window.webpackJsonp=window.webpackJsonp||[]).push([[192],{816:function(t,v,_){"use strict";_.r(v);var a=_(15),s=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"实战测试题五"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#实战测试题五"}},[t._v("#")]),t._v(" 实战测试题五")]),t._v(" "),_("p",[t._v("假设我们现在希望设计一个简单的海量图片存储系统，最大预期能够存储 1 亿张图片，并且希望这个海量图片存储系统具有下面这样几个功能：")]),t._v(" "),_("ul",[_("li",[t._v("存储一张图片及其它的元信息，主要的元信息有：图片名称以及一组 tag 信息。比如图片名称叫玫瑰花，tag 信息是{红色，花，情人节}；")]),t._v(" "),_("li",[t._v("根据关键词搜索一张图片，比如关键词是“情人节 花”“玫瑰花”；")]),t._v(" "),_("li",[t._v("避免重复插入相同的图片。这里，我们不能单纯地用图片的元信息，来比对是否是同一张图片，因为有可能存在名称相同但图片内容不同，或者名称不同图片内容相同的情况。")])]),t._v(" "),_("p",[t._v("我们希望自助开发一个简单的系统，不希望借助和维护过于复杂的三方系统，比如数据库（MySQL、Redis 等）、分布式存储系统（GFS、Bigtable 等），并且我们单台机器的性能有限，比如硬盘只有 1TB，内存只有 2GB，"),_("strong",[t._v("如何设计一个符合我们上面要求，操作高效，且使用机器资源最少的存储系统呢？")])]),t._v(" "),_("h1",{attrs:{id:"题目解析"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#题目解析"}},[t._v("#")]),t._v(" 题目解析")]),t._v(" "),_("p",[t._v("这个问题可以分成两部分，第一部分是根据元信息的搜索功能，第二部分是图片判重。")]),t._v(" "),_("p",[t._v("第一部分，我们可以借助搜索引擎中的倒排索引结构。关于倒排索引我这里先简要说下。")]),t._v(" "),_("p",[t._v("如题目中所说，一个图片会对应一组元信息，比如玫瑰花对应{红色，花，情人节}，牡丹花对应{白色，花}，我们可以将这种图片与元信息之间的关系，倒置过来建立索引。“花”这个关键词对应{玫瑰花，牡丹花}，“红色”对应{玫瑰花}，“白色”对应{牡丹花}，“情人节”对应{玫瑰花}。")]),t._v(" "),_("p",[t._v("当我们搜索“情人节 花”的时候，我们拿两个搜索关键词分别在倒排索引中查找，“花”查找到了{玫瑰花，牡丹花}，“情人节”查找到了{玫瑰花}，两个关键词对应的结果取交集，就是最终的结果了。")]),t._v(" "),_("p",[t._v("第二部分关于图片判重，我们要基于图片本身来判重，所以可以用哈希算法，对图片内容取哈希值。我们对哈希值建立散列表，这样就可以通过哈希值以及散列表，快速判断图片是否存在。")]),t._v(" "),_("p",[t._v("我这里只说说我的思路，这个问题中还有详细的内存和硬盘的限制。要想给出更加详细的设计思路，还需要根据这些限制，给出一个估算。详细的解答，我都放在在哈希算法那一节里到了，你可以自己回去看。")])])}),[],!1,null,null,null);v.default=s.exports}}]);