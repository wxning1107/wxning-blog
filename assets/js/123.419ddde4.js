(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{1191:function(t,a,s){"use strict";s.r(a);var e=s(15),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"事务隔离"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事务隔离"}},[t._v("#")]),t._v(" 事务隔离")]),t._v(" "),e("p",[t._v("当数据库上有多个事务同时执行的时候，就可能出现脏读（dirty read）、不可重复读（non-repeatable read）、幻读（phantom read）的问题，为了解决这些问题，就有了“隔离级别”的概念。")]),t._v(" "),e("p",[t._v("SQL 标准的事务隔离级别包括：读未提交（read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（serializable ）。")]),t._v(" "),e("ul",[e("li",[t._v("读未提交是指，一个事务还没提交时，它做的变更就能被别的事务看到。")]),t._v(" "),e("li",[t._v("读提交是指，一个事务提交之后，它做的变更才会被其他事务看到。")]),t._v(" "),e("li",[t._v("可重复读是指，一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。")]),t._v(" "),e("li",[t._v("串行化，顾名思义是对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。")])]),t._v(" "),e("p",[t._v("假设数据表 T 中只有一列，其中一行的值为 1，下面是按照时间顺序执行两个事务的行为。")]),t._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("mysql"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" create table T"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c int"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("engine")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("InnoDB"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ninsert into T"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" values"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[e("img",{attrs:{src:s(775),alt:"img"}})]),t._v(" "),e("ul",[e("li",[t._v("若隔离级别是“读未提交”， 则 V1 的值就是 2。这时候事务 B 虽然还没有提交，但是结果已经被 A 看到了。因此，V2、V3 也都是 2。")]),t._v(" "),e("li",[t._v("若隔离级别是“读提交”，则 V1 是 1，V2 的值是 2。事务 B 的更新在提交后才能被 A 看到。所以， V3 的值也是 2。")]),t._v(" "),e("li",[t._v("若隔离级别是“可重复读”，则 V1、V2 是 1，V3 是 2。之所以 V2 还是 1，遵循的就是这个要求：事务在执行期间看到的数据前后必须是一致的。")]),t._v(" "),e("li",[t._v("若隔离级别是“串行化”，则在事务 B 执行“将 1 改成 2”的时候，会被锁住。直到事务 A 提交后，事务 B 才可以继续执行。所以从 A 的角度看， V1、V2 值是 1，V3 的值是 2。")])]),t._v(" "),e("p",[e("strong",[t._v("在实现上，数据库里面会创建一个视图，访问的时候以视图的逻辑结果为准。在“可重复读”隔离级别下，这个视图是在事务启动时创建的，整个事务存在期间都用这个视图。在“读提交”隔离级别下，这个视图是在每个 SQL 语句开始执行的时候创建的。这里需要注意的是，“读未提交”隔离级别下直接返回记录上的最新值，没有视图概念；而“串行化”隔离级别下直接用加锁的方式来避免并行访问。")])]),t._v(" "),e("p",[t._v("什么时候需要“可重复读”的场景呢？")]),t._v(" "),e("p",[t._v("假设你在管理一个个人银行账户表。一个表存了每个月月底的余额，一个表存了账单明细。这时候你要做数据校对，也就是判断上个月的余额和当前余额的差额，是否与本月的账单明细一致。你一定希望在校对过程中，即使有用户发生了一笔新的交易，也不影响你的校对结果。")]),t._v(" "),e("p",[t._v("这时候使用“可重复读”隔离级别就很方便。")]),t._v(" "),e("h1",{attrs:{id:"事务隔离的实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事务隔离的实现"}},[t._v("#")]),t._v(" 事务隔离的实现")]),t._v(" "),e("p",[t._v("在 MySQL 中，实际上每条记录在更新的时候都会同时记录一条回滚操作。记录上的最新值，通过回滚操作，都可以得到前一个状态的值。")]),t._v(" "),e("p",[t._v("假设一个值从 1 被按顺序改成了 2、3、4，在回滚日志里面就会有类似下面的记录。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(776),alt:"img"}})]),t._v(" "),e("p",[t._v("当前值是 4，但是在查询这条记录的时候，不同时刻启动的事务会有不同的 read-view。如图中看到的，在视图 A、B、C 里面，这一个记录的值分别是 1、2、4，同一条记录在系统中可以存在多个版本，就是数据库的多版本并发控制（MVCC）。对于 read-view A，要得到 1，就必须将当前值依次执行图中所有的回滚操作得到。")]),t._v(" "),e("p",[t._v("同时你会发现，即使现在有另外一个事务正在将 4 改成 5，这个事务跟 read-view A、B、C 对应的事务是不会冲突的。")]),t._v(" "),e("p",[t._v("你一定会问，回滚日志总不能一直保留吧，什么时候删除呢？答案是，在不需要的时候才删除。也就是说，系统会判断，当没有事务再需要用到这些回滚日志时，回滚日志会被删除。")]),t._v(" "),e("p",[t._v("什么时候才不需要了呢？就是当系统里没有比这个回滚日志更早的 read-view 的时候。")]),t._v(" "),e("h1",{attrs:{id:"为什么尽量不要使用长事务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么尽量不要使用长事务"}},[t._v("#")]),t._v(" 为什么尽量不要使用长事务？")]),t._v(" "),e("p",[t._v("长事务意味着系统里面会存在很老的事务视图。由于这些事务随时可能访问数据库里面的任何数据，所以这个事务提交之前，数据库里面它可能用到的回滚记录都必须保留，这就会导致大量占用存储空间。")]),t._v(" "),e("p",[t._v("除了对回滚段的影响，长事务还占用锁资源，也可能拖垮整个库。")])])}),[],!1,null,null,null);a.default=n.exports},775:function(t,a,s){t.exports=s.p+"assets/img/image-20211128085103327.7ddfca55.png"},776:function(t,a,s){t.exports=s.p+"assets/img/image-20211128085644421.407e6833.png"}}]);