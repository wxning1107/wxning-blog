(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{1300:function(t,s,a){"use strict";a.r(s);var n=a(15),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"乐观锁-悲观锁的区别以及使用场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#乐观锁-悲观锁的区别以及使用场景"}},[t._v("#")]),t._v(" 乐观锁，悲观锁的区别以及使用场景")]),t._v(" "),n("h1",{attrs:{id:"悲观锁"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#悲观锁"}},[t._v("#")]),t._v(" 悲观锁")]),t._v(" "),n("p",[t._v("总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁（共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程）。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。Java中synchronized和ReentrantLock等独占锁就是悲观锁思想的实现。")]),t._v(" "),n("h1",{attrs:{id:"乐观锁"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#乐观锁"}},[t._v("#")]),t._v(" 乐观锁")]),t._v(" "),n("p",[t._v("总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号机制和CAS算法实现。乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库提供的类似于write_condition机制，其实都是提供的乐观锁。在Java中java.util.concurrent.atomic包下面的原子变量类就是使用了乐观锁的一种实现方式CAS实现的。")]),t._v(" "),n("p",[n("strong",[t._v("乐观锁常见的两种实现方式")])]),t._v(" "),n("p",[t._v("乐观锁一般会使用版本号机制或CAS算法实现。")]),t._v(" "),n("p",[n("strong",[t._v("1.版本号机制")])]),t._v(" "),n("p",[t._v("一般是在数据表中加上一个数据版本号version字段，表示数据被修改的次数，当数据被修改时，version值会加一。当线程A要更新数据值时，在读取数据的同时也会读取version值，在提交更新时，若刚才读取到的version值为当前数据库中的version值相等时才更新，否则重试更新操作，直到更新成功。")]),t._v(" "),n("p",[t._v("举一个简单的例子： 假设数据库中帐户信息表中有一个 version 字段，当前值为 1 ；而当前帐户余额字段（ balance ）为 $100 。")]),t._v(" "),n("p",[t._v("1.操作员 A 此时将其读出（ version=1 ），并从其帐户余额中扣除 $50（ $100-$50 ）。")]),t._v(" "),n("p",[t._v("2.在操作员 A 操作的过程中，操作员B 也读入此用户信息（ version=1 ），并从其帐户余额中扣除 $20 （ $100-$20 ）。")]),t._v(" "),n("p",[t._v("3.操作员 A 完成了修改工作，将数据版本号加一（ version=2 ），连同帐户扣除后余额（ balance=$50 ），提交至数据库更新，此时由于提交数据版本大于数据库记录当前版本，数据被更新，数据库记录 version 更新为 2 。")]),t._v(" "),n("p",[t._v("4.操作员 B 完成了操作，也将版本号加一（ version=2 ）试图向数据库提交数据（ balance=$80 ），但此时比对数据库记录版本时发现，操作员 B 提交的数据版本号为 2 ，数据库记录当前版本也为 2 ，不满足 “ 提交版本必须大于记录当前版本才能执行更新 “ 的乐观锁策略，因此，操作员 B 的提交被驳回。")]),t._v(" "),n("p",[t._v("这样，就避免了操作员 B 用基于 version=1 的旧数据修改的结果覆盖操作员A 的操作结果的可能。")]),t._v(" "),n("p",[n("strong",[t._v("2.CAS算法")])]),t._v(" "),n("p",[t._v("即compare and swap（比较与交换），是一种有名的无锁算法。无锁编程，即不使用锁的情况下实现多线程之间的变量同步，也就是在没有线程被阻塞的情况下实现变量的同步，所以也叫非阻塞同步（Non-blocking Synchronization）。CAS算法涉及到三个操作数")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("需要读写的内存值 V")])]),t._v(" "),n("li",[n("p",[t._v("进行比较的值 A")])]),t._v(" "),n("li",[n("p",[t._v("拟写入的新值 B")])])]),t._v(" "),n("p",[t._v("当且仅当 V 的值等于 A时，CAS通过原子方式用新值B来更新V的值，否则不会执行任何操作（比较和替换是一个原子操作）。一般情况下是一个自旋操作，即不断的重试。")]),t._v(" "),n("p",[n("strong",[t._v("乐观锁的缺点")])]),t._v(" "),n("p",[t._v("1.ABA 问题")]),t._v(" "),n("p",[t._v('如果一个变量V初次读取的时候是A值，并且在准备赋值的时候检查到它仍然是A值，那我们就能说明它的值没有被其他线程修改过了吗？很明显是不能的，因为在这段时间它的值可能被改为其他值，然后又改回A，那CAS操作就会误认为它从来没有被修改过。这个问题被称为CAS操作的 "ABA"问题。')]),t._v(" "),n("p",[t._v("JDK 1.5 以后的 AtomicStampedReference 类就提供了此种能力，其中的 compareAndSet 方法就是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。")]),t._v(" "),n("p",[t._v("2.循环时间长开销大")]),t._v(" "),n("p",[t._v("自旋CAS（也就是不成功就一直循环执行直到成功）如果长时间不成功，会给CPU带来非常大的执行开销。 如果JVM能支持处理器提供的pause指令那么效率会有一定的提升，pause指令有两个作用，第一它可以延迟流水线执行指令（de-pipeline）,使CPU不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。第二它可以避免在退出循环的时候因内存顺序冲突（memory order violation）而引起CPU流水线被清空（CPU pipeline flush），从而提高CPU的执行效率。")]),t._v(" "),n("p",[t._v("3.只能保证一个共享变量的原子操作")]),t._v(" "),n("p",[t._v("CAS 只对单个共享变量有效，当操作涉及跨多个共享变量时 CAS 无效。但是从 JDK 1.5开始，提供了AtomicReference类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行 CAS 操作.所以我们可以使用锁或者利用AtomicReference类把多个共享变量合并成一个共享变量来操作。")]),t._v(" "),n("h1",{attrs:{id:"两种锁的使用场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#两种锁的使用场景"}},[t._v("#")]),t._v(" 两种锁的使用场景")]),t._v(" "),n("p",[t._v("乐观锁适用于写比较少的情况下（多读场景），即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果是多写的情况，一般会经常产生冲突，这就会导致上层应用会不断的进行retry，这样反倒是降低了性能，所以一般多写的场景下用悲观锁就比较合适。")]),t._v(" "),n("h1",{attrs:{id:"cas与synchronized的使用情景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cas与synchronized的使用情景"}},[t._v("#")]),t._v(" CAS与synchronized的使用情景")]),t._v(" "),n("p",[t._v("简单的来说CAS适用于写比较少的情况下（多读场景，冲突一般较少），synchronized适用于写比较多的情况下（多写场景，冲突一般较多）")]),t._v(" "),n("p",[t._v("1.对于资源竞争较少（线程冲突较轻）的情况，使用synchronized同步锁进行线程阻塞和唤醒切换以及用户态内核态间的切换操作额外浪费消耗cpu资源；而CAS基于硬件实现，不需要进入内核，不需要切换线程，操作自旋几率较少，因此可以获得更高的性能。")]),t._v(" "),n("p",[t._v("2.对于资源竞争严重（线程冲突严重）的情况，CAS自旋的概率会比较大，从而浪费更多的CPU资源，效率低于synchronized。")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("补充:")]),t._v(" "),n("p",[t._v("Java并发编程这个领域中synchronized关键字一直都是元老级的角色，很久之前很多人都会称它为 “重量级锁” 。但是，在JavaSE 1.6之后进行了主要包括为了减少获得锁和释放锁带来的性能消耗而引入的 偏向锁 和 轻量级锁 以及其它各种优化之后变得在某些情况下并不是那么重了。synchronized的底层实现主要依靠 Lock-Free 的队列，基本思路是 自旋后阻塞，竞争切换后继续竞争锁，稍微牺牲了公平性，但获得了高吞吐量。在线程冲突较少的情况下，可以获得和CAS类似的性能；而线程冲突严重的情况下，性能远高于CAS。")])]),t._v(" "),n("hr"),t._v(" "),n("p",[t._v("可以参考"),n("a",{attrs:{href:"https://www.bilibili.com/video/BV15L411b7d5/?spm_id_from=333.788",target:"_blank",rel:"noopener noreferrer"}},[t._v("京东金融是如何通过乐观锁解决并发数据冲突的？"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("比如下面两个事务并发执行更新余额时会出现问题，结果应该是1000，但是实际上是900。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(565),alt:"img"}})]),t._v(" "),n("p",[t._v("一般解决方案是悲观锁的方式，添加for update加锁。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(566),alt:"img"}})]),t._v(" "),n("p",[t._v("但是悲观锁对并发性影响很大，京东金融采用乐观锁的实现方式，即为数据添加一个版本号_version。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(567),alt:"img"}})]),t._v(" "),n("p",[t._v("更新时需要判断版本号，事务1的版本号是1，但是在更新时已经被事务2更新为2，所以更新会失败。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(568),alt:"img"}})]),t._v(" "),n("p",[t._v("如果遇到冲突后该怎么办？")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("前端应用提示“数据正在处理，请稍后再试！”")])]),t._v(" "),n("li",[n("p",[t._v("附加spring-retry在service上进行方法重试")])])]),t._v(" "),n("p",[t._v("下面是更新失败后重试的例子，注解Retryable定义重试次数是3，重试的条件是抛出VersionException.class类型的异常。")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Transactional")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Retryable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("VersionException")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" maxAttempts "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateBal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Account")]),t._v(" acc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  执行：”select id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("bal"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("_version from acc where id "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1001")]),t._v("”"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    acc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setBal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("acc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("400")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("；\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 执行：“update acc set bal "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" $"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("acc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bal"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" _version"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("_version "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" \n\t\twhere id "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1001")]),t._v(" and _version"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("acc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("version"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("”；\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("VersionException")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("“产生并发异常”"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("；\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br")])])])}),[],!1,null,null,null);s.default=e.exports},565:function(t,s,a){t.exports=a.p+"assets/img/image-20220423102021622.3e3c2a86.png"},566:function(t,s,a){t.exports=a.p+"assets/img/image-20220423102205829.a42dff31.png"},567:function(t,s,a){t.exports=a.p+"assets/img/image-20220423102346112.278166b6.png"},568:function(t,s,a){t.exports=a.p+"assets/img/image-20220423102429186.6eca6482.png"}}]);