(window.webpackJsonp=window.webpackJsonp||[]).push([[307],{1120:function(v,_,t){"use strict";t.r(_);var s=t(15),r=Object(s.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"削峰、异步、解藕"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#削峰、异步、解藕"}},[v._v("#")]),v._v(" 削峰、异步、解藕")]),v._v(" "),t("p",[v._v("在课程一开始，我就带你了解了高并发系统设计的三个目标：性能、可用性和可扩展性，而在提升系统性能方面，我们一直关注的是系统的查询性能。也用了很多的篇幅去讲解数据库的分布式改造，各类缓存的原理和使用技巧。 "),t("strong",[v._v("究其原因在于，")]),v._v(" 我们遇到的大部分场景都是读多写少， "),t("strong",[v._v("尤其是在一个系统的初级阶段。")])]),v._v(" "),t("p",[v._v("但是，随着业务的发展，你可能会遇到一些存在 "),t("strong",[v._v("高并发写请求的场景，其中秒杀抢购就是最典型的场景。")]),v._v(" 假设你的商城策划了一期秒杀活动，活动在第五天的 00:00 开始，仅限前 200 名，那么秒杀即将开始时，后台会显示用户正在疯狂地刷新 APP 或者浏览器来保证自己能够尽量早的看到商品。")]),v._v(" "),t("p",[v._v("这时，你面对的依旧是读请求过高， "),t("strong",[v._v("那么应对的措施有哪些呢？")])]),v._v(" "),t("p",[v._v("因为用户查询的是少量的商品数据，属于 "),t("strong",[v._v("查询的热点数据")]),v._v(" ，你可以采用缓存策略，将请求尽量挡在上层的缓存中，能被静态化的数据，比如说商城里的图片和视频数据，"),t("strong",[v._v("尽量做到静态化，这样就可以命中 CDN 节点缓存")]),v._v(" ，减少 Web 服务器的查询量和带宽负担。")]),v._v(" "),t("p",[v._v("稍微缓解了读请求之后，00:00 分秒杀活动准时开始，用户瞬间向电商系统请求生成订单，扣减库存，用户的这些写操作都是不经过缓存直达数据库的。1 秒钟之内，有 1 万个数据库连接同时达到，系统的数据库濒临崩溃，寻找能够应对如此高并发的"),t("strong",[v._v("写请求")]),v._v("方案迫在眉睫。这时你想到了消息队列。")]),v._v(" "),t("h2",{attrs:{id:"异步处理简化秒杀请求中的业务流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异步处理简化秒杀请求中的业务流程"}},[v._v("#")]),v._v(" 异步处理简化秒杀请求中的业务流程")]),v._v(" "),t("p",[v._v("其实，在大量的写请求 「攻击」你的电商系统的时候，消息队列除了发挥主要的削峰填谷的作用之外，还可以实现 "),t("strong",[v._v("异步处理")]),v._v(" 来简化秒杀请求中的业务流程，提升系统的性能。")]),v._v(" "),t("p",[v._v("你想，在刚才提到的秒杀场景下，我们在处理购买请求时，需要 500ms。这时，你分析了一下整个的购买流程，发现 "),t("strong",[v._v("这里面会有主要的业务逻辑，也会有次要的业务逻辑：")]),v._v(" 比如说，主要的流程是生成订单、扣减库存；次要的流程可能是我们在下单购买成功之后会给用户发放优惠券，会增加用户的积分。")]),v._v(" "),t("p",[v._v("可以将发放优惠券、增加积分的操作放在另外一个队列处理机中执行")]),v._v(" "),t("h2",{attrs:{id:"解耦实现秒杀系统模块之间松耦合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解耦实现秒杀系统模块之间松耦合"}},[v._v("#")]),v._v(" 解耦实现秒杀系统模块之间松耦合")]),v._v(" "),t("p",[v._v("除了异步处理和削峰填谷以外，消息队列在秒杀系统中起到的另一个作用是 "),t("strong",[v._v("解耦合")]),v._v(" 。")]),v._v(" "),t("p",[v._v("比如数据团队对你说，在秒杀活动之后想要统计活动的数据，借此来分析活动商品的受欢迎程度、购买者人群的特点以及用户对于秒杀互动的满意程度等等指标。 "),t("strong",[v._v("而我们需要将大量的数据发送给数据团队")]),v._v(" ，那么要怎么做呢？")]),v._v(" "),t("p",[t("strong",[v._v("一个思路是：")]),v._v(" 可以使用 HTTP 或者 RPC 的方式来同步地调用，也就是数据团队这边提供一个接口，我们实时将秒杀的数据推送给它， "),t("strong",[v._v("但是这样调用会有两个问题：")])]),v._v(" "),t("ul",[t("li",[v._v("整体系统的耦合性比较强，当数据团队的接口发生故障时，会影响到秒杀系统的可用性。")]),v._v(" "),t("li",[v._v("当数据系统需要新的字段，就要变更接口的参数，那么秒杀系统也要随着一起变更。")])]),v._v(" "),t("p",[v._v("这时，我们可以考虑使用消息队列降低业务系统和数据系统的直接耦合度。")]),v._v(" "),t("p",[v._v("秒杀系统产生一条购买数据后，我们可以先把全部数据发送给消息队列，然后数据团队再订阅这个消息队列的话题，这样它们就可以接收到数据，然后再做过滤和处理了。")]),v._v(" "),t("p",[v._v("秒杀系统在这样解耦合之后，数据系统的故障就不会影响到秒杀系统了，同时，当数据系统需要新的字段时，只需要解析消息队列中的消息，拿到需要的数据就好了。")]),v._v(" "),t("p",[t("strong",[v._v("异步处理、解耦合和削峰填谷")]),v._v(" 是消息队列在秒杀系统设计中起到的主要作用，其中，")]),v._v(" "),t("ul",[t("li",[v._v("异步处理可以简化业务流程中的步骤，提升系统性能；")]),v._v(" "),t("li",[v._v("削峰填谷可以削去到达秒杀系统的峰值流量，让业务逻辑的处理更加缓和；")]),v._v(" "),t("li",[v._v("解耦合可以将秒杀系统和数据系统解耦开，这样两个系统的任何变更都不会影响到另一个系统，")])])])}),[],!1,null,null,null);_.default=r.exports}}]);