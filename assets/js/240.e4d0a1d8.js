(window.webpackJsonp=window.webpackJsonp||[]).push([[240],{1123:function(t,s,e){"use strict";e.r(s);var n=e(15),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"应用五-负载均衡"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#应用五-负载均衡"}},[t._v("#")]),t._v(" 应用五：负载均衡")]),t._v(" "),e("p",[t._v("我们知道，负载均衡算法有很多，比如轮询、随机、加权轮询等。那如何才能实现一个会话粘滞（session sticky）的负载均衡算法呢？也就是说，我们需要在同一个客户端上，在一次会话中的所有请求都路由到同一个服务器上。")]),t._v(" "),e("p",[t._v("最直接的方法就是，维护一张映射关系表，这张表的内容是客户端 IP 地址或者会话 ID 与服务器编号的映射关系。客户端发出的每次请求，都要先在映射表中查找应该路由到的服务器编号，然后再请求编号对应的服务器。这种方法简单直观，但也有几个弊端：")]),t._v(" "),e("ul",[e("li",[t._v("如果客户端很多，映射表可能会很大，比较浪费内存空间；")]),t._v(" "),e("li",[t._v("客户端下线、上线，服务器扩容、缩容都会导致映射失效，这样维护映射表的成本就会很大；")])]),t._v(" "),e("p",[t._v("如果借助哈希算法，这些问题都可以非常完美地解决。"),e("strong",[t._v("我们可以通过哈希算法，对客户端 IP 地址或者会话 ID 计算哈希值，将取得的哈希值与服务器列表的大小进行取模运算，最终得到的值就是应该被路由到的服务器编号。")]),t._v(" 这样，我们就可以把同一个 IP 过来的所有请求，都路由到同一个后端服务器上。")])])}),[],!1,null,null,null);s.default=r.exports}}]);