(window.webpackJsonp=window.webpackJsonp||[]).push([[306],{1210:function(t,_,v){"use strict";v.r(_);var s=v(15),r=Object(s.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"mysql有哪些提高性能的方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mysql有哪些提高性能的方法"}},[t._v("#")]),t._v(" MySQL有哪些提高性能的方法？")]),t._v(" "),v("h1",{attrs:{id:"短连接风暴"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#短连接风暴"}},[t._v("#")]),t._v(" 短连接风暴")]),t._v(" "),v("p",[t._v("MySQL 建立连接的过程，成本是很高的。除了正常的网络连接三次握手外，还需要做登录权限判断和获得这个连接的数据读写权限。")]),t._v(" "),v("p",[t._v("短连接模型存在一个风险，就是一旦数据库处理得慢一些，连接数就会暴涨。")]),t._v(" "),v("p",[v("strong",[t._v("第一种方法：先处理掉那些占着连接但是不工作的线程。")])]),t._v(" "),v("p",[t._v("对于那些不需要保持的连接，我们可以通过 kill connection 主动踢掉。")]),t._v(" "),v("p",[v("strong",[t._v("第二种方法：减少连接过程的消耗。")])]),t._v(" "),v("p",[t._v("即，让数据库跳过权限验证阶段，不建议使用")]),t._v(" "),v("h1",{attrs:{id:"慢查询性能问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#慢查询性能问题"}},[t._v("#")]),t._v(" 慢查询性能问题")]),t._v(" "),v("p",[t._v("在 MySQL 中，会引发性能问题的慢查询，大体有以下三种可能：")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("索引没有设计好；")])]),t._v(" "),v("li",[v("p",[t._v("SQL 语句没写好；")])]),t._v(" "),v("li",[v("p",[t._v("MySQL 选错了索引。")])])]),t._v(" "),v("h3",{attrs:{id:"导致慢查询的第一种可能是-索引没有设计好"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#导致慢查询的第一种可能是-索引没有设计好"}},[t._v("#")]),t._v(" "),v("strong",[t._v("导致慢查询的第一种可能是，索引没有设计好")])]),t._v(" "),v("p",[t._v("这种场景一般就是通过紧急创建索引来解决。MySQL 5.6 版本以后，创建索引都支持 Online DDL 了，对于那种高峰期数据库已经被这个语句打挂了的情况，最高效的做法就是直接执行 alter table 语句。")]),t._v(" "),v("p",[t._v("比较理想的是能够在备库先执行。假设你现在的服务是一主一备，主库 A、备库 B，这个方案的大致流程是这样的：")]),t._v(" "),v("p",[t._v("在备库 B 上执行 set sql_log_bin=off，也就是不写 binlog，然后执行 alter table 语句加上索引；")]),t._v(" "),v("p",[t._v("执行主备切换；")]),t._v(" "),v("p",[t._v("这时候主库是 B，备库是 A。在 A 上执行 set sql_log_bin=off，然后执行 alter table 语句加上索引。")]),t._v(" "),v("p",[t._v("这是一个“古老”的 DDL 方案。平时在做变更的时候，你应该考虑类似 "),v("strong",[t._v("gh-ost")]),t._v(" 这样的方案，更加稳妥。但是在需要紧急处理时，上面这个方案的效率是最高的。")]),t._v(" "),v("h3",{attrs:{id:"导致慢查询的第二种可能是-语句没写好"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#导致慢查询的第二种可能是-语句没写好"}},[t._v("#")]),t._v(" "),v("strong",[t._v("导致慢查询的第二种可能是，语句没写好")])]),t._v(" "),v("p",[t._v("比如导致语句没有使用上索引。在索引上执行函数操作等。")]),t._v(" "),v("h3",{attrs:{id:"导致慢查询的第三种可能-mysql-选错了索引"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#导致慢查询的第三种可能-mysql-选错了索引"}},[t._v("#")]),t._v(" 导致慢查询的第三种可能，MySQL 选错了索引")]),t._v(" "),v("p",[t._v("这时候，应急方案就是给这个语句加上 force index。")]),t._v(" "),v("p",[v("strong",[t._v("上面我和你讨论的由慢查询导致性能问题的三种可能情况，实际上出现最多的是前两种，即：索引没设计好和语句没写好。而这两种情况，恰恰是完全可以避免的。比如，通过下面这个过程，我们就可以预先发现问题。")])]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("上线前，在测试环境，把慢查询日志（slow log）打开，并且把 long_query_time 设置成 0，确保每个语句都会被记录入慢查询日志；")])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("在测试表里插入模拟线上的数据，做一遍回归测试；")])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("观察慢查询日志里每类语句的输出，特别留意 Rows_examined 字段是否与预期一致。")])])])]),t._v(" "),v("p",[t._v("如果新增的 SQL 语句不多，手动跑一下就可以。而如果是新项目的话，或者是修改了原有项目的 表结构设计，全量回归测试都是必要的。这时候，你需要工具帮你检查所有的 SQL 语句的返回结果。比如，你可以使用开源工具 "),v("a",{attrs:{href:"https://www.percona.com/doc/percona-toolkit/3.0/pt-query-digest.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("pt-query-digest"),v("OutboundLink")],1),t._v("。")]),t._v(" "),v("h1",{attrs:{id:"qps-突增问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#qps-突增问题"}},[t._v("#")]),t._v(" QPS 突增问题")]),t._v(" "),v("p",[t._v("有时候由于业务突然出现高峰，或者应用程序 bug，导致某个语句的 QPS 突然暴涨，也可能导致 MySQL 压力过大，影响服务。")]),t._v(" "),v("p",[t._v("最理想的情况是让业务把这个功能下掉，服务自然就会恢复。")]),t._v(" "),v("p",[t._v("而下掉一个功能，如果从数据库端处理的话，对应于不同的背景，有不同的方法可用。我这里再和你展开说明一下。")]),t._v(" "),v("p",[t._v("1.一种是由全新业务的 bug 导致的。假设你的 DB 运维是比较规范的，也就是说白名单是一个个加的。这种情况下，如果你能够确定业务方会下掉这个功能，只是时间上没那么快，那么就可以从数据库端直接把白名单去掉。")]),t._v(" "),v("p",[t._v("2.如果这个新功能使用的是单独的数据库用户，可以用管理员账号把这个用户删掉，然后断开现有连接。这样，这个新功能的连接不成功，由它引发的 QPS 就会变成 0。")]),t._v(" "),v("p",[t._v('3.如果这个新增的功能跟主体功能是部署在一起的，那么我们只能通过处理语句来限制。这时，我们可以使用上面提到的查询重写功能，把压力最大的 SQL 语句直接重写成"select 1"返回。这种方案优先级较低，谨慎考虑。')])])}),[],!1,null,null,null);_.default=r.exports}}]);