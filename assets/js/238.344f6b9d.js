(window.webpackJsonp=window.webpackJsonp||[]).push([[238],{1429:function(s,a,t){"use strict";t.r(a);var e=t(15),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"一条sql查询语句是如何执行的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一条sql查询语句是如何执行的"}},[s._v("#")]),s._v(" 一条SQL查询语句是如何执行的？")]),s._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("mysql"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" * from T where "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ID")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("这条sql查询语句是如何执行的呢？")]),s._v(" "),e("p",[e("img",{attrs:{src:t(820),alt:"img"}})]),s._v(" "),e("p",[s._v("大体来说，MySQL 可以分为 Server 层和存储引擎层两部分。")]),s._v(" "),e("p",[s._v("Server 层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。")]),s._v(" "),e("p",[s._v("而存储引擎层负责数据的存储和提取。其架构模式是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。")]),s._v(" "),e("h1",{attrs:{id:"连接器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#连接器"}},[s._v("#")]),s._v(" 连接器")]),s._v(" "),e("p",[s._v("连接器负责跟客户端建立连接、获取权限、维持和管理连接。连接命令一般是这么写的：")]),s._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("mysql -h"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$ip")]),s._v(" -P"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$port")]),s._v(" -u"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$user")]),s._v(" -p\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("连接命令中的 mysql 是客户端工具，用来跟服务端建立连接。在完成经典的 TCP 握手后，连接器就要开始认证你的身份，这个时候用的就是你输入的用户名和密码。如果用户名密码认证通过，连接器会到权限表里面查出你拥有的权限。")]),s._v(" "),e("p",[s._v("数据库里面，长连接是指连接成功后，如果客户端持续有请求，则一直使用同一个连接。短连接则是指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个。建立连接的过程通常是比较复杂的，所以我建议你在使用中要尽量减少建立连接的动作，也就是尽量使用长连接。")]),s._v(" "),e("p",[s._v("但是全部使用长连接后，你可能会发现，有些时候 MySQL 占用内存涨得特别快，这是因为 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才释放。所以如果长连接累积下来，可能导致内存占用太大，被系统强行杀掉（OOM），从现象看就是 MySQL 异常重启了。")]),s._v(" "),e("p",[s._v("怎么解决这个问题呢？你可以考虑以下两种方案。")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连。")])]),s._v(" "),e("li",[e("p",[s._v("如果你用的是 MySQL 5.7 或更新版本，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection 来重新初始化连接资源。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。")])])]),s._v(" "),e("h1",{attrs:{id:"查询缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查询缓存"}},[s._v("#")]),s._v(" 查询缓存")]),s._v(" "),e("p",[s._v("连接建立完成后，你就可以执行 select 语句了。执行逻辑就会来到第二步：查询缓存。")]),s._v(" "),e("p",[s._v("MySQL 拿到一个查询请求后，会先到查询缓存看看，之前是不是执行过这条语句。之前执行过的语句及其结果可能会以 key-value 对的形式，被直接缓存在内存中。key 是查询的语句，value 是查询的结果。如果你的查询能够直接在这个缓存中找到 key，那么这个 value 就会被直接返回给客户端。如果语句不在查询缓存中，就会继续后面的执行阶段。执行完成后，执行结果会被存入查询缓存中。")]),s._v(" "),e("p",[s._v("但是大多数情况下我会建议你不要使用查询缓存，为什么呢？因为查询缓存往往弊大于利。")]),s._v(" "),e("p",[s._v("查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。因此很可能你费劲地把结果存起来，还没使用呢，就被一个更新全清空了。对于更新压力大的数据库来说，查询缓存的命中率会非常低。除非你的业务就是有一张静态表，很长时间才会更新一次。比如，一个系统配置表，那这张表上的查询才适合使用查询缓存。")]),s._v(" "),e("p",[s._v("MySQL 8.0 版本直接将查询缓存的整块功能删掉了.")]),s._v(" "),e("h1",{attrs:{id:"分析器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分析器"}},[s._v("#")]),s._v(" 分析器")]),s._v(" "),e("p",[s._v("如果没有命中查询缓存，就要开始真正执行语句了。首先，MySQL 需要知道你要做什么，因此需要对 SQL 语句做解析。")]),s._v(" "),e("p",[s._v("分析器先会做“词法分析”。你输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面的字符串分别是什么，代表什么。")]),s._v(" "),e("p",[s._v('MySQL 从你输入的"select"这个关键字识别出来，这是一个查询语句。它也要把字符串“T”识别成“表名 T”，把字符串“ID”识别成“列 ID”。')]),s._v(" "),e("p",[s._v("做完了这些识别以后，就要做“语法分析”。根据词法分析的结果，语法分析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法。")]),s._v(" "),e("h1",{attrs:{id:"优化器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优化器"}},[s._v("#")]),s._v(" 优化器")]),s._v(" "),e("p",[s._v("经过了分析器，MySQL 就知道你要做什么了。在开始执行之前，还要先经过优化器的处理。")]),s._v(" "),e("p",[s._v("优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序。比如你执行下面这样的语句，这个语句是执行两个表的 join：")]),s._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("mysql"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" * from t1 "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("join")]),s._v(" t2 using"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ID"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  where t1.c"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" and t2.d"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[e("p",[s._v("既可以先从表 t1 里面取出 c=10 的记录的 ID 值，再根据 ID 值关联到表 t2，再判断 t2 里面 d 的值是否等于 20。")])]),s._v(" "),e("li",[e("p",[s._v("也可以先从表 t2 里面取出 d=20 的记录的 ID 值，再根据 ID 值关联到 t1，再判断 t1 里面 c 的值是否等于 10。")])])]),s._v(" "),e("p",[s._v("这两种执行方法的逻辑结果是一样的，但是执行的效率会有不同，而优化器的作用就是决定选择使用哪一个方案。")]),s._v(" "),e("h1",{attrs:{id:"执行器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行器"}},[s._v("#")]),s._v(" 执行器")]),s._v(" "),e("p",[s._v("MySQL 通过分析器知道了你要做什么，通过优化器知道了该怎么做，于是就进入了执行器阶段，开始执行语句。")]),s._v(" "),e("p",[s._v("开始执行的时候，要先判断一下你对这个表 T 有没有执行查询的权限，如果没有，就会返回没有权限的错误。如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。")]),s._v(" "),e("p",[s._v("比如我们这个例子中的表 T 中，ID 字段没有索引，那么执行器的执行流程是这样的：")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是 10，如果不是则跳过，如果是则将这行存在结果集中；")])]),s._v(" "),e("li",[e("p",[s._v("调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。")])]),s._v(" "),e("li",[e("p",[s._v("执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。")])])]),s._v(" "),e("p",[s._v("对于有索引的表，执行的逻辑也差不多。第一次调用的是“取满足条件的第一行”这个接口，之后循环取“满足条件的下一行”这个接口，这些接口都是引擎中已经定义好的。")]),s._v(" "),e("p",[s._v("你会在数据库的慢查询日志中看到一个 rows_examined 的字段，表示这个语句执行过程中扫描了多少行。这个值就是在执行器每次调用引擎获取数据行的时候累加的。")])])}),[],!1,null,null,null);a.default=r.exports},820:function(s,a,t){s.exports=t.p+"assets/img/image-20211128080043045.c851a825.png"}}]);