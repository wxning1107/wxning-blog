(window.webpackJsonp=window.webpackJsonp||[]).push([[453],{1569:function(v,t,_){"use strict";_.r(t);var r=_(15),a=Object(r.a)({},(function(){var v=this,t=v.$createElement,_=v._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"怎样做到高可用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#怎样做到高可用"}},[v._v("#")]),v._v(" 怎样做到高可用？")]),v._v(" "),_("h2",{attrs:{id:"系统设计"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#系统设计"}},[v._v("#")]),v._v(" 系统设计")]),v._v(" "),_("p",[_("strong",[v._v("1.failover（故障转移）")])]),v._v(" "),_("p",[v._v("一般来说，发生 failover 的节点可能有两种情况：")]),v._v(" "),_("p",[v._v("1.是在 "),_("strong",[v._v("完全对等")]),v._v(" 的节点之间做 failover。")]),v._v(" "),_("p",[v._v("在对等节点之间做 failover 相对来说简单些。在这类系统中所有节点都承担读写流量，并且节点中不保存状态，每个节点都可以作为另一个节点的镜像。在这种情况下，如果访问某一个节点失败，那么简单地随机访问另一个节点就好了。举个例子，Nginx 可以配置当某一个 Tomcat 出现大于 500 的请求的时候，重试请求另一个 Tomcat 节点")]),v._v(" "),_("p",[v._v("2.是在 "),_("strong",[v._v("不对等")]),v._v(" 的节点之间，即系统中存在主节点也存在备节点。")]),v._v(" "),_("p",[v._v("针对不对等节点的 failover 机制会复杂很多。比方说我们有一个主节点，有多台备用节点，这些备用节点可以是热备（同样在线提供服务的备用节点），也可以是冷备（只作为备份使用），那么我们就需要在代码中控制如何检测主备机器是否故障，以及如何做主备切换。")]),v._v(" "),_("p",[v._v("使用最广泛的故障检测机制是「心跳」。你可以在客户端上定期地向主节点发送心跳包，也可以从备份节点上定期发送心跳包。当一段时间内未收到心跳包，就可以认为主节点已经发生故障，可以触发选主的操作。")]),v._v(" "),_("p",[v._v("选主的结果需要在多个备份节点上达成一致，所以会使用某一种分布式一致性算法，比方说 Paxos，Raft。")]),v._v(" "),_("p",[_("strong",[v._v("2.调用超时控制")])]),v._v(" "),_("p",[v._v("超时时间如何选择？")]),v._v(" "),_("p",[_("strong",[v._v("通过收集系统之间的调用日志，统计比如说 99% 的响应时间是怎样的，然后依据这个时间来指定超时时间")])]),v._v(" "),_("p",[_("strong",[v._v("3.降级")])]),v._v(" "),_("p",[v._v("比方说我们发一条微博会先经过反垃圾服务检测，检测内容是否是广告，通过后才会完成诸如写数据库等逻辑。")]),v._v(" "),_("p",[v._v("反垃圾的检测是一个相对比较重的操作，因为涉及到非常多的策略匹配，在日常流量下虽然会比较耗时却还能正常响应。但是当并发较高的情况下，它就有可能成为瓶颈，而且它也不是发布微博的主体流程，所以我们可以暂时关闭反垃圾服务检测，这样就可以保证主体的流程更加稳定。")]),v._v(" "),_("p",[_("strong",[v._v("4. 限流")])]),v._v(" "),_("h2",{attrs:{id:"系统运维"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#系统运维"}},[v._v("#")]),v._v(" 系统运维")]),v._v(" "),_("p",[_("strong",[v._v("1.灰度发布")])]),v._v(" "),_("p",[_("strong",[v._v("2.故障演练")])]),v._v(" "),_("p",[v._v("故障演练指的是对系统进行一些破坏性的手段，观察在出现局部故障时，整体的系统表现是怎样的，从而发现系统中存在的，潜在的可用性问题。")])])}),[],!1,null,null,null);t.default=a.exports}}]);