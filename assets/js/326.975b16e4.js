(window.webpackJsonp=window.webpackJsonp||[]).push([[326],{1128:function(t,e,s){"use strict";s.r(e);var n=s(15),r=Object(n.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"应用四-散列函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用四-散列函数"}},[t._v("#")]),t._v(" 应用四：散列函数")]),t._v(" "),s("p",[t._v("前面讲了很多哈希算法的应用，实际上，散列函数也是哈希算法的一种应用。")]),t._v(" "),s("p",[t._v("我们前两节讲到，散列函数是设计一个散列表的关键。它直接决定了散列冲突的概率和散列表的性能。不过，相对哈希算法的其他应用，散列函数对于散列算法冲突的要求要低很多。即便出现个别散列冲突，只要不是过于严重，我们都可以通过开放寻址法或者链表法解决。")]),t._v(" "),s("p",[t._v("不仅如此，散列函数对于散列算法计算得到的值，是否能反向解密也并不关心。散列函数中用到的散列算法，更加关注散列后的值是否能平均分布，也就是，一组数据是否能均匀地散列在各个槽中。除此之外，散列函数执行的快慢，也会影响散列表的性能，所以，散列函数用的散列算法一般都比较简单，比较追求效率。")])])}),[],!1,null,null,null);e.default=r.exports}}]);