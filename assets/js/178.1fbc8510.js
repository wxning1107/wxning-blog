(window.webpackJsonp=window.webpackJsonp||[]).push([[178],{1109:function(t,s,a){"use strict";a.r(s);var e=a(15),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"应用一-安全加密"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#应用一-安全加密"}},[t._v("#")]),t._v(" 应用一：安全加密")]),t._v(" "),e("p",[t._v("说到哈希算法的应用，最先想到的应该就是安全加密。最常用于加密的哈希算法是"),e("strong",[t._v("MD5")]),t._v("（MD5 Message-Digest Algorithm，MD5 消息摘要算法）和"),e("strong",[t._v("SHA")]),t._v("（Secure Hash Algorithm，安全散列算法）。")]),t._v(" "),e("p",[t._v("除了这两个之外，当然还有很多其他加密算法，比如"),e("strong",[t._v("DES")]),t._v("（Data Encryption Standard，数据加密标准）、"),e("strong",[t._v("AES")]),t._v("（Advanced Encryption Standard，高级加密标准）。")]),t._v(" "),e("p",[t._v("前面我讲到的哈希算法四点要求，对用于加密的哈希算法来说，有两点格外重要。第一点是很难根据哈希值反向推导出原始数据，第二点是散列冲突的概率要很小。")]),t._v(" "),e("p",[t._v("第一点很好理解，加密的目的就是防止原始数据泄露，所以很难通过哈希值反向推导原始数据，这是一个最基本的要求。所以我着重讲一下第二点。实际上，不管是什么哈希算法，我们只能尽量减少碰撞冲突的概率，理论上是没办法做到完全不冲突的。为什么这么说呢？")]),t._v(" "),e("p",[t._v("这里就基于组合数学中一个非常基础的理论，鸽巢原理（也叫抽屉原理）。这个原理本身很简单，它是说，如果有 10 个鸽巢，有 11 只鸽子，那肯定有 1 个鸽巢中的鸽子数量多于 1 个，换句话说就是，肯定有 2 只鸽子在 1 个鸽巢内。")]),t._v(" "),e("p",[t._v("有了鸽巢原理的铺垫之后，我们再来看，"),e("strong",[t._v("为什么哈希算法无法做到零冲突？")])]),t._v(" "),e("p",[t._v("我们知道，哈希算法产生的哈希值的长度是固定且有限的。比如前面举的 MD5 的例子，哈希值是固定的 128 位二进制串，能表示的数据是有限的，最多能表示 2^128 个数据，而我们要哈希的数据是无穷的。基于鸽巢原理，如果我们对 2^128+1 个数据求哈希值，就必然会存在哈希值相同的情况。这里你应该能想到，一般情况下，哈希值越长的哈希算法，散列冲突的概率越低。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("2^128=340282366920938463463374607431768211456\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("为了让你能有个更加直观的感受，我找了两段字符串放在这里。这两段字符串经过 MD5 哈希算法加密之后，产生的哈希值是相同的。")]),t._v(" "),e("p",[e("img",{attrs:{src:a(593),alt:"img"}})]),t._v(" "),e("p",[t._v("不过，即便哈希算法存在散列冲突的情况，但是因为哈希值的范围很大，冲突的概率极低，所以相对来说还是很难破解的。像 MD5，有 2^128 个不同的哈希值，这个数据已经是一个天文数字了，所以散列冲突的概率要小于 1/2^128。")]),t._v(" "),e("p",[t._v("如果我们拿到一个 MD5 哈希值，希望通过毫无规律的穷举的方法，找到跟这个 MD5 值相同的另一个数据，那耗费的时间应该是个天文数字。所以，即便哈希算法存在冲突，但是在有限的时间和资源下，哈希算法还是被很难破解的。")]),t._v(" "),e("p",[t._v("除此之外，没有绝对安全的加密。越复杂、越难破解的加密算法，需要的计算时间也越长。比如 SHA-256 比 SHA-1 要更复杂、更安全，相应的计算时间就会比较长。密码学界也一直致力于找到一种快速并且很难被破解的哈希算法。我们在实际的开发过程中，也需要权衡破解难度和计算时间，来决定究竟使用哪种加密算法。")])])}),[],!1,null,null,null);s.default=n.exports},593:function(t,s,a){t.exports=a.p+"assets/img/image-20211103223324860.3d9f2ec1.png"}}]);