(window.webpackJsonp=window.webpackJsonp||[]).push([[282],{1179:function(e,_,v){"use strict";v.r(_);var t=v(15),n=Object(t.a)({},(function(){var e=this,_=e.$createElement,v=e._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"new-和make-区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#new-和make-区别"}},[e._v("#")]),e._v(" new()和make()区别？")]),e._v(" "),v("p",[e._v("new(T) 和 make(T,args) 是 Go 语言内建函数，用来分配内存，但适用的类型不同。")]),e._v(" "),v("p",[e._v("new(T) 会为 T 类型的新值分配已置零的内存空间，并返回地址（指针），即类型为 *T 的值。换句话说就是，返回一个指针，该指针指向新分配的、类型为 T 的零值。适用于值类型，如数组、结构体等。")]),e._v(" "),v("p",[e._v("make(T,args) 返回初始化之后的 T 类型的值，这个值并不是 T 类型的零值，也不是指针 *T，是经过初始化之后的 T 的引用。make() 只适用于 slice、map 和 channel。")]),e._v(" "),v("p",[v("strong",[e._v("参考：")]),e._v(" "),v("a",{attrs:{href:"https://www.jb51.net/article/126703.htm",target:"_blank",rel:"noopener noreferrer"}},[e._v("百度文章"),v("OutboundLink")],1)]),e._v(" "),v("p",[v("code",[e._v("make")]),e._v(" 函数：")]),e._v(" "),v("ul",[v("li",[e._v("能够"),v("strong",[e._v("分配并初始化")]),e._v("类型所需的内存空间和结构，返回引用类型的本身。")]),e._v(" "),v("li",[e._v("具有使用范围的局限性，仅支持 "),v("code",[e._v("channel")]),e._v("、"),v("code",[e._v("map")]),e._v("、"),v("code",[e._v("slice")]),e._v(" 三种类型。")]),e._v(" "),v("li",[e._v("具有独特的优势，"),v("code",[e._v("make")]),e._v(" 函数会对三种类型的内部数据结构（长度、容量等）赋值。")])]),e._v(" "),v("p",[v("code",[e._v("new")]),e._v(" 函数：")]),e._v(" "),v("ul",[v("li",[e._v("能够"),v("strong",[e._v("分配")]),e._v("类型所需的内存空间，返回指针引用（指向内存的指针）。")]),e._v(" "),v("li",[e._v("可被替代，能够通过字面值快速初始化。")])])])}),[],!1,null,null,null);_.default=n.exports}}]);