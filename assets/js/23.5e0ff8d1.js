(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{1077:function(a,s,t){"use strict";t.r(s);var n=t(15),e=Object(n.a)({},(function(){var a=this,s=a.$createElement,n=a._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h1",{attrs:{id:"索引"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#索引"}},[a._v("#")]),a._v(" 索引")]),a._v(" "),n("h1",{attrs:{id:"索引的常见模型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#索引的常见模型"}},[a._v("#")]),a._v(" 索引的常见模型")]),a._v(" "),n("p",[a._v("哈希表是一种以键 - 值（key-value）存储数据的结构，我们只要输入待查找的值即 key，就可以找到其对应的值即 Value。哈希的思路很简单，把值放在数组里，用一个哈希函数把 key 换算成一个确定的位置，然后把 value 放在数组的这个位置。")]),a._v(" "),n("p",[a._v("不可避免地，多个 key 值经过哈希函数的换算，会出现同一个值的情况。处理这种情况的一种方法是，拉出一个链表。")]),a._v(" "),n("p",[a._v("哈希表不适合区间查询，"),n("strong",[a._v("哈希表这种结构适用于只有等值查询的场景")]),a._v("，比如 Memcached 及其他一些 NoSQL 引擎。")]),a._v(" "),n("p",[a._v("而有序数组在等值查询和范围查询场景中的性能就都非常优秀。如果仅仅看查询效率，有序数组就是最好的数据结构了。但是，在需要更新数据的时候就麻烦了，你往中间插入一个记录就必须得挪动后面所有的记录，成本太高。所以，有序数组索引只适用于静态存储引擎，比如你要保存的是 2017 年某个城市的所有人口信息，这类不会再修改的数据。")]),a._v(" "),n("p",[a._v("实际上大多数的数据库存储却并不使用二叉树。其原因是，索引不止存在内存中，还要写到磁盘上。你可以想象一下一棵 100 万节点的平衡二叉树，树高 20。一次查询可能需要访问 20 个数据块。在机械硬盘时代，从磁盘随机读一个数据块需要 10 ms 左右的寻址时间。也就是说，对于一个 100 万行的表，如果使用二叉树来存储，单独访问一个行可能需要 20 个 10 ms 的时间，这个查询可真够慢的。")]),a._v(" "),n("p",[a._v("为了让一个查询尽量少地读磁盘，就必须让查询过程访问尽量少的数据块。那么，我们就不应该使用二叉树，而是要使用“N 叉”树。这里，“N 叉”树中的“N”取决于数据块的大小。")]),a._v(" "),n("p",[a._v("以 InnoDB 的一个整数字段索引为例，这个 N 差不多是 1200。这棵树高是 4 的时候，就可以存 1200 的 3 次方个值，这已经 17 亿了。考虑到树根的数据块总是在内存中的，一个 10 亿行的表上一个整数字段的索引，查找一个值最多只需要访问 3 次磁盘。其实，树的第二层也有很大概率在内存中，那么访问磁盘的平均次数就更少了。")]),a._v(" "),n("h1",{attrs:{id:"innodb-的索引模型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#innodb-的索引模型"}},[a._v("#")]),a._v(" InnoDB 的索引模型")]),a._v(" "),n("p",[a._v("在 InnoDB 中，表都是根据主键顺序以索引的形式存放的，这种存储方式的表称为索引组织表。InnoDB 使用了 B+ 树索引模型，所以数据都是存储在 B+ 树中的。")]),a._v(" "),n("p",[a._v("假设，我们有一个主键列为 ID 的表，表中有字段 k，并且在 k 上有索引。")]),a._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[a._v("mysql"),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" create table T"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("id")]),a._v(" int primary key, \nk int not null, \nname varchar"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("16")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(",\nindex "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("k"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("))")]),a._v("engine"),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("InnoDB"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br")])]),n("p",[a._v("表中 R1~R5 的 (ID,k) 值分别为 (100,1)、(200,2)、(300,3)、(500,5) 和 (600,6)。")]),a._v(" "),n("p",[n("img",{attrs:{src:t(712),alt:"img"}})]),a._v(" "),n("p",[a._v("从图中不难看出，根据叶子节点的内容，索引类型分为主键索引和非主键索引。")]),a._v(" "),n("p",[a._v("主键索引的叶子节点存的是整行数据。在 InnoDB 里，主键索引也被称为聚簇索引（clustered index）。")]),a._v(" "),n("p",[a._v("非主键索引的叶子节点内容是主键的值。在 InnoDB 里，非主键索引也被称为二级索引（secondary index）。")]),a._v(" "),n("p",[n("strong",[a._v("基于主键索引和普通索引的查询有什么区别？")])]),a._v(" "),n("ul",[n("li",[a._v("如果语句是 select * from T where ID=500，即主键查询方式，则只需要搜索 ID 这棵 B+ 树；")]),a._v(" "),n("li",[a._v("如果语句是 select * from T where k=5，即普通索引查询方式，则需要先搜索 k 索引树，得到 ID 的值为 500，再到 ID 索引树搜索一次。这个过程称为回表。")])]),a._v(" "),n("h1",{attrs:{id:"为什么使用自增主键索引"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用自增主键索引"}},[a._v("#")]),a._v(" 为什么使用自增主键索引？")]),a._v(" "),n("p",[a._v("B+ 树为了维护索引有序性，在插入新值的时候需要做必要的维护。以上面这个图为例，如果插入新的行 ID 值为 700，则只需要在 R5 的记录后面插入一个新记录。如果新插入的 ID 值为 400，就相对麻烦了，需要逻辑上挪动后面的数据，空出位置。")]),a._v(" "),n("p",[a._v("而更糟的情况是，如果 R5 所在的数据页已经满了，根据 B+ 树的算法，这时候需要申请一个新的数据页，然后挪动部分数据过去。这个过程称为页分裂。在这种情况下，性能自然会受影响。")]),a._v(" "),n("p",[a._v("除了性能外，页分裂操作还影响数据页的利用率。原本放在一个页的数据，现在分到两个页中，整体空间利用率降低大约 50%。")]),a._v(" "),n("p",[a._v("当然有分裂就有合并。当相邻两个页由于删除了数据，利用率很低之后，会将数据页做合并。合并的过程，可以认为是分裂过程的逆过程。")]),a._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),n("p",[a._v("你可能在一些建表规范里面见到过类似的描述，要求建表语句里一定要有自增主键。")])]),a._v(" "),n("p",[a._v("自增主键是指自增列上定义的主键，在建表语句中一般是这么定义的： NOT NULL PRIMARY KEY AUTO_INCREMENT。")]),a._v(" "),n("p",[a._v("插入新记录的时候可以不指定 ID 的值，系统会获取当前 ID 最大值加 1 作为下一条记录的 ID 值。")]),a._v(" "),n("p",[a._v("也就是说，自增主键的插入数据模式，正符合了我们前面提到的递增插入的场景。每次插入一条新记录，都是追加操作，都不涉及到挪动其他记录，也不会触发叶子节点的分裂。")]),a._v(" "),n("p",[a._v("而有业务逻辑的字段做主键，则往往不容易保证有序插入，这样写数据成本相对较高。")]),a._v(" "),n("p",[a._v("除了考虑性能外，我们还可以从存储空间的角度来看。假设你的表中确实有一个唯一字段，比如字符串类型的身份证号，那应该用身份证号做主键，还是用自增字段做主键呢？")]),a._v(" "),n("p",[a._v("由于每个非主键索引的叶子节点上都是主键的值。如果用身份证号做主键，那么每个二级索引的叶子节点占用约 20 个字节，而如果用整型做主键，则只要 4 个字节，如果是长整型（bigint）则是 8 个字节。")]),a._v(" "),n("p",[n("strong",[a._v("显然，主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小。")])]),a._v(" "),n("p",[a._v("所以，从性能和存储空间方面考量，自增主键往往是更合理的选择。")]),a._v(" "),n("h1",{attrs:{id:"覆盖索引"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#覆盖索引"}},[a._v("#")]),a._v(" 覆盖索引")]),a._v(" "),n("p",[a._v("在下面这个表 T 中，如果我执行 select * from T where k between 3 and 5，需要执行几次树的搜索操作，会扫描多少行？")]),a._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[a._v("mysql"),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" create table T "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("\nID int primary key,\nk int NOT NULL DEFAULT "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(", \ns varchar"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("16")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" NOT NULL DEFAULT "),n("span",{pre:!0,attrs:{class:"token string"}},[a._v("''")]),a._v(",\nindex k"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("k"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("))")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("engine")]),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("InnoDB"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n \ninsert into T values"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("100,1")]),a._v(", "),n("span",{pre:!0,attrs:{class:"token string"}},[a._v("'aa'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(","),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("200,2")]),a._v(","),n("span",{pre:!0,attrs:{class:"token string"}},[a._v("'bb'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(","),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("300,3")]),a._v(","),n("span",{pre:!0,attrs:{class:"token string"}},[a._v("'cc'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(","),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("500,5")]),a._v(","),n("span",{pre:!0,attrs:{class:"token string"}},[a._v("'ee'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(","),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("600,6")]),a._v(","),n("span",{pre:!0,attrs:{class:"token string"}},[a._v("'ff'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(","),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("700,7")]),a._v(","),n("span",{pre:!0,attrs:{class:"token string"}},[a._v("'gg'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br")])]),n("p",[n("img",{attrs:{src:t(713),alt:"img"}})]),a._v(" "),n("p",[a._v("现在，我们一起来看看这条 SQL 查询语句的执行流程：")]),a._v(" "),n("ul",[n("li",[a._v("在 k 索引树上找到 k=3 的记录，取得 ID = 300；")]),a._v(" "),n("li",[a._v("再到 ID 索引树查到 ID=300 对应的 R3；")]),a._v(" "),n("li",[a._v("在 k 索引树取下一个值 k=5，取得 ID=500；")]),a._v(" "),n("li",[a._v("再回到 ID 索引树查到 ID=500 对应的 R4；")]),a._v(" "),n("li",[a._v("在 k 索引树取下一个值 k=6，不满足条件，循环结束。")])]),a._v(" "),n("p",[a._v("在这个过程中，"),n("strong",[a._v("回到主键索引树搜索的过程，我们称为回表。")])]),a._v(" "),n("p",[a._v("如果执行的语句是 select ID from T where k between 3 and 5，这时只需要查 ID 的值，而 ID 的值已经在 k 索引树上了，因此可以直接提供查询结果，不需要回表。也就是说，在这个查询里面，索引 k 已经“覆盖了”我们的查询需求，我们称为"),n("strong",[a._v("覆盖索引。")])]),a._v(" "),n("p",[a._v("基于上面覆盖索引的说明，我们来讨论一个问题：在一个市民信息表上，是否有必要将身份证号和名字建立联合索引？假设这个市民表的定义是这样的：")]),a._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[a._v("CREATE TABLE "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("tuser"),n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("\n  "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("id")]),n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v(" int"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("11")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" NOT NULL,\n  "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("id_card"),n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v(" varchar"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("32")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" DEFAULT NULL,\n  "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("name"),n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v(" varchar"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("32")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" DEFAULT NULL,\n  "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("age"),n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v(" int"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("11")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" DEFAULT NULL,\n  "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("ismale"),n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v(" tinyint"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" DEFAULT NULL,\n  PRIMARY KEY "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("id")]),n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(",\n  KEY "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("id_card"),n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("id_card"),n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(",\n  KEY "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("name_age"),n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("name"),n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v(","),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("age"),n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("ENGINE")]),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("InnoDB\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br")])]),n("p",[a._v("我们知道，身份证号是市民的唯一标识。也就是说，如果有根据身份证号查询市民信息的需求，我们只要在身份证号字段上建立索引就够了。而再建立一个（身份证号、姓名）的联合索引，是不是浪费空间？")]),a._v(" "),n("p",[a._v("如果现在有一个高频请求，要根据市民的身份证号查询他的姓名，这个联合索引就有意义了。它可以在这个高频请求上用到覆盖索引，不再需要回表查整行记录，减少语句的执行时间。")]),a._v(" "),n("h1",{attrs:{id:"最左前缀原则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#最左前缀原则"}},[a._v("#")]),a._v(" 最左前缀原则")]),a._v(" "),n("p",[a._v("看到这里你一定有一个疑问，如果为每一种查询都设计一个索引，索引是不是太多了。如果我现在要按照市民的身份证号去查他的家庭地址呢？虽然这个查询需求在业务中出现的概率不高，但总不能让它走全表扫描吧？反过来说，单独为一个不频繁的请求创建一个（身份证号，地址）的索引又感觉有点浪费。应该怎么做呢？")]),a._v(" "),n("p",[a._v("这里，我先和你说结论吧。"),n("strong",[a._v("B+ 树这种索引结构，可以利用索引的“最左前缀”，来定位记录。")])]),a._v(" "),n("p",[a._v("为了直观地说明这个概念，我们用（name，age）这个联合索引来分析。")]),a._v(" "),n("p",[n("img",{attrs:{src:t(714),alt:"img"}})]),a._v(" "),n("p",[a._v("可以看到，索引项是按照索引定义里面出现的字段顺序排序的。")]),a._v(" "),n("p",[a._v("当你的逻辑需求是查到所有名字是“张三”的人时，可以快速定位到 ID4，然后向后遍历得到所有需要的结果。")]),a._v(" "),n("p",[a._v('如果你要查的是所有名字第一个字是“张”的人，你的 SQL 语句的条件是"where name like ‘张 %’"。这时，你也能够用上这个索引，查找到第一个符合条件的记录是 ID3，然后向后遍历，直到不满足条件为止。')]),a._v(" "),n("p",[a._v("可以看到，不只是索引的全部定义，只要满足最左前缀，就可以利用索引来加速检索。这个最左前缀可以是联合索引的最左 N 个字段，也可以是字符串索引的最左 M 个字符。")]),a._v(" "),n("h1",{attrs:{id:"联合索引字段顺序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#联合索引字段顺序"}},[a._v("#")]),a._v(" 联合索引字段顺序")]),a._v(" "),n("p",[a._v("基于上面对最左前缀索引的说明，我们来讨论一个问题：在建立联合索引的时候，如何安排索引内的字段顺序。")]),a._v(" "),n("p",[a._v("因为可以支持最左前缀，所以当已经有了 (a,b) 这个联合索引后，一般就不需要单独在 a 上建立索引了。因此，第一原则是，如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的。")]),a._v(" "),n("p",[a._v("那么，如果既有联合查询，又有基于 a、b 各自的查询呢？查询条件里面只有 b 的语句，是无法使用 (a,b) 这个联合索引的，这时候你不得不维护另外一个索引，也就是说你需要同时维护 (a,b)、(b) 这两个索引。")]),a._v(" "),n("p",[a._v("这时候，我们要考虑的原则就是空间了。比如上面这个市民表的情况，name 字段是比 age 字段大的 ，那我就建议你创建一个（name,age) 的联合索引和一个 (age) 的单字段索引。")]),a._v(" "),n("h1",{attrs:{id:"索引下推"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#索引下推"}},[a._v("#")]),a._v(" 索引下推")]),a._v(" "),n("p",[a._v("上一段我们说到满足最左前缀原则的时候，最左前缀可以用于在索引中定位记录。这时，你可能要问，那些不符合最左前缀的部分，会怎么样呢？")]),a._v(" "),n("p",[a._v("我们还是以市民表的联合索引（name, age）为例。如果现在有一个需求：检索出表中“名字第一个字是张，而且年龄是 10 岁的所有男孩”。那么，SQL 语句是这么写的：")]),a._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[a._v("mysql"),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("select")]),a._v(" * from tuser where name like "),n("span",{pre:!0,attrs:{class:"token string"}},[a._v("'张 %'")]),a._v(" and "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("age")]),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v(" and "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("ismale")]),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br")])]),n("p",[a._v("你已经知道了前缀索引规则，所以这个语句在搜索索引树的时候，只能用 “张”，找到第一个满足条件的记录 ID3。当然，这还不错，总比全表扫描要好。")]),a._v(" "),n("p",[a._v("然后呢？")]),a._v(" "),n("p",[a._v("当然是判断其他条件是否满足。")]),a._v(" "),n("p",[a._v("在 MySQL 5.6 之前，只能从 ID3 开始一个个回表。到主键索引上找出数据行，再对比字段值。")]),a._v(" "),n("p",[a._v("而 MySQL 5.6 引入的"),n("strong",[a._v("索引下推")]),a._v("优化（index condition pushdown)， 可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。")]),a._v(" "),n("p",[a._v("无索引下推执行流程:")]),a._v(" "),n("p",[n("img",{attrs:{src:t(715),alt:"img"}})]),a._v(" "),n("p",[a._v("有索引下推执行流程：")]),a._v(" "),n("p",[n("img",{attrs:{src:t(716),alt:"img"}})]),a._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[a._v("注意：")]),a._v(" "),n("p",[a._v("每一个虚线箭头表示回表一次。")])]),a._v(" "),n("p",[a._v("无索引下推中，在 (name,age) 索引里面我特意去掉了 age 的值，这个过程 InnoDB 并不会去看 age 的值，只是按顺序把“name 第一个字是’张’”的记录一条条取出来回表。因此，需要回表 4 次。")]),a._v(" "),n("p",[a._v("有索引下推和无索引下推的区别是，InnoDB 在 (name,age) 索引内部就判断了 age 是否等于 10，对于不等于 10 的记录，直接判断并跳过。在我们的这个例子中，只需要对 ID4、ID5 这两条记录回表取数据判断，就只需要回表 2 次。")])])}),[],!1,null,null,null);s.default=e.exports},712:function(a,s,t){a.exports=t.p+"assets/img/image-20211128092006901.85ac746c.png"},713:function(a,s,t){a.exports=t.p+"assets/img/image-20211128093235891.106c0a1d.png"},714:function(a,s,t){a.exports=t.p+"assets/img/image-20211128093654479.c1e2e7b6.png"},715:function(a,s,t){a.exports=t.p+"assets/img/image-20211128094118296.8c146928.png"},716:function(a,s,t){a.exports=t.p+"assets/img/image-20211128094129560.32723250.png"}}]);