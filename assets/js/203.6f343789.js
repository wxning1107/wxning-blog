(window.webpackJsonp=window.webpackJsonp||[]).push([[203],{873:function(t,e,s){"use strict";s.r(e);var a=s(15),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"为什么散列表和链表经常会一起使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么散列表和链表经常会一起使用"}},[t._v("#")]),t._v(" 为什么散列表和链表经常会一起使用？")]),t._v(" "),s("p",[t._v("在链表那一节，我讲到如何用链表来实现 LRU 缓存淘汰算法，但是链表实现的 LRU 缓存淘汰算法的时间复杂度是 O(n)，当时我也提到了，通过散列表可以将这个时间复杂度降低到 O(1)。")]),t._v(" "),s("p",[t._v("在跳表那一节，我提到 Redis 的有序集合是使用跳表来实现的，跳表可以看作一种改进版的链表。当时我们也提到，Redis 有序集合不仅使用了跳表，还用到了散列表。")]),t._v(" "),s("p",[t._v("除此之外，如果你熟悉 Java 编程语言，你会发现 LinkedHashMap 这样一个常用的容器，也用到了散列表和链表两种数据结构。")]),t._v(" "),s("p",[t._v("为什么散列表和链表经常一块使用？")]),t._v(" "),s("p",[t._v("散列表这种数据结构虽然支持非常高效的数据插入、删除、查找操作，但是散列表中的数据都是通过散列函数打乱之后无规律存储的。也就说，它无法支持按照某种顺序快速地遍历数据。如果希望按照顺序遍历散列表中的数据，那我们需要将散列表中的数据拷贝到数组中，然后排序，再遍历。")]),t._v(" "),s("p",[t._v("因为散列表是动态数据结构，不停地有数据的插入、删除，所以每当我们希望按顺序遍历散列表中的数据的时候，都需要先排序，那效率势必会很低。为了解决这个问题，我们将散列表和链表（或者跳表）结合在一起使用。")])])}),[],!1,null,null,null);e.default=n.exports}}]);