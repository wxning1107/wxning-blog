(window.webpackJsonp=window.webpackJsonp||[]).push([[216],{867:function(o,t,e){"use strict";e.r(t);var n=e(15),r=Object(n.a)({},(function(){var o=this,t=o.$createElement,e=o._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[e("h1",{attrs:{id:"锁和读写锁底层实现-锁有几种模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#锁和读写锁底层实现-锁有几种模式"}},[o._v("#")]),o._v(" 锁和读写锁底层实现? 锁有几种模式？")]),o._v(" "),e("p",[o._v("在正常模式下，锁的等待者会按照先进先出的顺序获取锁。但是刚被唤起的 Goroutine 与新创建的 Goroutine 竞争时，大概率会获取不到锁，为了减少这种情况的出现，一旦 Goroutine 超过 1ms 没有获取到锁，它就会将当前互斥锁切换饥饿模式，防止部分 Goroutine 被『饿死』。")]),o._v(" "),e("p",[o._v("在饥饿模式中，互斥锁会直接交给等待队列最前面的 Goroutine。新的 Goroutine 在该状态下不能获取锁、也不会进入自旋状态，它们只会在队列的末尾等待。如果一个 Goroutine 获得了互斥锁并且它在队列的末尾或者它等待的时间少于 1ms，那么当前的互斥锁就会切换回正常模式。")]),o._v(" "),e("p",[o._v("与饥饿模式相比，正常模式下的互斥锁能够提供更好地性能，饥饿模式的能避免 Goroutine 由于陷入等待无法获取锁而造成的高尾延时。")]),o._v(" "),e("hr"),o._v(" "),e("p",[o._v("互斥锁有两种状态：正常状态和饥饿状态。")]),o._v(" "),e("p",[o._v("在正常状态下，所有等待锁的 goroutine 按照FIFO顺序等待。唤醒的 goroutine 不会直接拥有锁，而是会和新请求锁的 goroutine 竞争锁的拥有。新请求锁的 goroutine 具有优势：它正在 CPU 上执行，而且可能有好几个，所以刚刚唤醒的 goroutine 有很大可能在锁竞争中失败。在这种情况下，这个被唤醒的 goroutine 会加入到等待队列的前面。 如果一个等待的 goroutine 超过 1ms 没有获取锁，那么它将会把锁转变为饥饿模式。")]),o._v(" "),e("p",[o._v("在饥饿模式下，锁的所有权将从 unlock 的 goroutine 直接交给交给等待队列中的第一个。新来的 goroutine 将不会尝试去获得锁，即使锁看起来是 unlock 状态, 也不会去尝试自旋操作，而是放在等待队列的尾部。")]),o._v(" "),e("p",[o._v("如果一个等待的 goroutine 获取了锁，并且满足一以下其中的任何一个条件：(1)它是队列中的最后一个；(2)它等待的时候小于1ms。它会将锁的状态转换为正常状态。")]),o._v(" "),e("p",[o._v("正常状态有很好的性能表现，饥饿模式也是非常重要的，因为它能阻止尾部延迟的现象。")])])}),[],!1,null,null,null);t.default=r.exports}}]);