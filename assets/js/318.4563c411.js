(window.webpackJsonp=window.webpackJsonp||[]).push([[318],{1249:function(t,v,_){"use strict";_.r(v);var s=_(15),e=Object(s.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"如何防止sql注入攻击"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何防止sql注入攻击"}},[t._v("#")]),t._v(" 如何防止SQL注入攻击？")]),t._v(" "),_("p",[t._v("SQL注入即是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。")]),t._v(" "),_("p",[_("strong",[t._v("如何防止sql注入？")])]),t._v(" "),_("p",[t._v("1.尽量用预编译机制")]),t._v(" "),_("p",[t._v("少用字符串拼接的方式传参，它是sql注入问题的根源。")]),t._v(" "),_("p",[t._v("2.要对特殊字符转义")]),t._v(" "),_("p",[t._v("有些特殊字符，比如：%作为like语句中的参数时，要对其进行转义处理。")]),t._v(" "),_("p",[t._v("3.要捕获异常")]),t._v(" "),_("p",[t._v("需要对所有的异常情况进行捕获，切记接口直接返回异常信息，因为有些异常信息中包含了sql信息，包括：库名，表名，字段名等。")]),t._v(" "),_("p",[t._v("4.严格限制数据库权限")]),t._v(" "),_("p",[t._v("对生产环境的数据库建立单独的账号，只分配DML相关权限，且不能访问系统表。切勿在程序中直接使用管理员账号。")]),t._v(" "),_("p",[t._v("5.大量成熟的框架与组件")]),t._v(" "),_("p",[t._v("框架其本身自带有对安全性的考量，使开发者无感知的写出较为安全的代码。比如 thinkphp 在处理查询的时候，根本不会让开发者自己去拼接语句，而是对象化查询。")]),t._v(" "),_("p",[_("strong",[t._v("参考：")]),t._v(" https://www.zhihu.com/question/335706717")])])}),[],!1,null,null,null);v.default=e.exports}}]);