(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{403:function(s,t,a){s.exports=a.p+"assets/media/粗线条话GC（一）.3ca61550.mp4"},404:function(s,t,a){s.exports=a.p+"assets/media/粗线条话GC（二）.da0c08e2.mp4"},869:function(s,t,a){"use strict";a.r(t);var e=a(15),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"垃圾回收机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收机制"}},[s._v("#")]),s._v(" 垃圾回收机制")]),s._v(" "),e("video",{attrs:{id:"video",width:"1000px",height:"600px",controls:"controls"}},[e("source",{attrs:{id:"mp4",src:a(403),type:"video/mp4"}})]),s._v(" "),e("video",{attrs:{id:"video",width:"1000px",height:"600px",controls:"controls"}},[e("source",{attrs:{id:"mp4",src:a(404),type:"video/mp4"}})]),s._v(" "),e("h1",{attrs:{id:"gc触发时机"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gc触发时机"}},[s._v("#")]),s._v(" GC触发时机")]),s._v(" "),e("p",[e("strong",[s._v("阀值触法：")])]),s._v(" "),e("p",[s._v("垃圾回收的触发是由一个gcpercent的变量控制的，当新分配的内存占已在使用中的内存的比例超过gcprecent时就会触发。比如，gcpercent=100，当前使用了4M的内存，那么当内存分配到达8M时就会再次gc。如果回收完毕后，内存的使用量为5M，那么下次回收的时机则是内存分配达到10M的时候。也就是说，并不是内存分配越多，垃圾回收频率越高，这个算法使得垃圾回收的频率比较稳定，适合应用的场景。")]),s._v(" "),e("p",[s._v("gcpercent的值是通过环境变量"),e("code",[s._v("GOGC")]),s._v("获取的，如果不设置这个环境变量，默认值是100。如果将它设置成off，则是关闭垃圾回收。")]),s._v(" "),e("p",[e("strong",[s._v("定期触法：")])]),s._v(" "),e("p",[s._v("默认情况下，最长2分钟触发一次GC，这个间隔在"),e("code",[s._v("src/runtime/proc.go:forcegcperiod")]),s._v("变量中被声明：")]),s._v(" "),e("div",{staticClass:"language-go line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-go"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// forcegcperiod is the maximum time in nanoseconds between garbage")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// collections. If we go this long without a garbage collection, one")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// is forced to run.")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// This is a variable for testing purposes. It normally doesn't change.")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" forcegcperiod "),e("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int64")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1e9")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[e("strong",[s._v("手动触法：")])]),s._v(" "),e("p",[s._v("程序代码中也可以使用"),e("code",[s._v("runtime.GC()")]),s._v("来手动触发GC。这主要用于GC性能测试和统计。")]),s._v(" "),e("h1",{attrs:{id:"标记清除法缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标记清除法缺点"}},[s._v("#")]),s._v(" 标记清除法缺点？")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("STW，stop the world；让程序暂停，程序出现卡顿 "),e("strong",[s._v("(重要问题)")]),s._v("；")])]),s._v(" "),e("li",[e("p",[s._v("标记需要扫描整个heap；")])]),s._v(" "),e("li",[e("p",[s._v("清除数据会产生heap碎片。")])])]),s._v(" "),e("p",[s._v("参考："),e("a",{attrs:{href:"https://www.kancloud.cn/aceld/golang/1958308",target:"_blank",rel:"noopener noreferrer"}},[s._v("aceld博客文章"),e("OutboundLink")],1)]),s._v(" "),e("h1",{attrs:{id:"强三色不变式和弱三色不变式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强三色不变式和弱三色不变式"}},[s._v("#")]),s._v(" 强三色不变式和弱三色不变式")]),s._v(" "),e("p",[s._v("强三色不变式：强制不允许黑色对象引用白色对象")]),s._v(" "),e("p",[s._v("弱三色不变式：黑色对象可以引用白色对象，但是需要白色对象存在其他灰色对象堆它的引用，或者可达它的链路上游存在灰色对象")]),s._v(" "),e("h1",{attrs:{id:"插入写屏障和删除写屏障"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#插入写屏障和删除写屏障"}},[s._v("#")]),s._v(" 插入写屏障和删除写屏障")]),s._v(" "),e("p",[e("strong",[s._v("插入写屏障：")])]),s._v(" "),e("p",[s._v("在A对象引用B对象的时候，B对象被标记为灰色。(将B挂在A下游，B必须被标记为灰色)，满足"),e("strong",[s._v("强三色不变式")]),s._v(". (不存在黑色对象引用白色对象的情况了， 因为白色会强制变成灰色)")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("添加下游对象(当前下游对象slot, 新下游对象ptr) {   \n  //1\n  标记灰色(新下游对象ptr)   \n  \n  //2\n  当前下游对象slot = 新下游对象ptr  \t\t\t\t  \n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("由于栈空间的特点是容量小,但是要求相应速度快,因为函数调用弹出频繁使用, 所以“插入屏障”机制,在"),e("strong",[s._v("栈空间的对象操作中不使用")]),s._v(". 而仅仅使用在堆空间对象的操作中。所以在准备回收白色前，重新扫描一次栈空间，此时加"),e("code",[s._v("STW")]),s._v("暂停保护栈防止外界干扰（有新的白色被黑色添加），这次STW大约的时间在10~100ms间。")]),s._v(" "),e("p",[e("strong",[s._v("参考：")]),e("a",{attrs:{href:"https://www.kancloud.cn/aceld/golang/1958308",target:"_blank",rel:"noopener noreferrer"}},[s._v("aceld博客文章"),e("OutboundLink")],1)]),s._v(" "),e("p",[e("strong",[s._v("删除写屏障：")])]),s._v(" "),e("p",[s._v("被删除的对象，如果自身为灰色或者白色，那么被标记为灰色。满足"),e("strong",[s._v("弱三色不变式")]),s._v(". (保护灰色对象到白色对象的路径不会断)")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("添加下游对象(当前下游对象slot， 新下游对象ptr) {\n  //1\n  if (当前下游对象slot是灰色 || 当前下游对象slot是白色) {\n  \t\t标记灰色(当前下游对象slot)     //slot为被删除对象， 标记为灰色\n  }\n  \n  //2\n  当前下游对象slot = 新下游对象ptr\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("这种方式的回收精度低，一个对象即使被删除了最后一个指向它的指针也依旧可以活过这一轮，在下一轮GC中被清理掉。")]),s._v(" "),e("h1",{attrs:{id:"混合写屏障"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#混合写屏障"}},[s._v("#")]),s._v(" 混合写屏障")]),s._v(" "),e("p",[s._v("1、GC开始将栈上的对象全部扫描并标记为黑色(之后不再进行第二次重复扫描，无需STW)，")]),s._v(" "),e("p",[s._v("2、GC期间，任何在栈上创建的新对象，均为黑色。")]),s._v(" "),e("p",[s._v("3、被删除的对象标记为灰色。")]),s._v(" "),e("p",[s._v("4、被添加的对象标记为灰色。")]),s._v(" "),e("p",[s._v("栈上不启用屏障，最初全部被标记为黑色，堆上启用屏障")]),s._v(" "),e("h1",{attrs:{id:"辅助gc-mutator-assist"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#辅助gc-mutator-assist"}},[s._v("#")]),s._v(" 辅助GC(Mutator Assist)")]),s._v(" "),e("p",[s._v("为了防止内存分配过快，在GC执行过程中，如果goroutine需要分配内存，那么这个goroutine会参与一部分GC的工作，即帮助GC做一部分工作，这个机制叫作Mutator Assist。")])])}),[],!1,null,null,null);t.default=r.exports}}]);