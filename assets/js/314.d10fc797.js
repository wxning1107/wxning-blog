(window.webpackJsonp=window.webpackJsonp||[]).push([[314],{1195:function(e,t,l){"use strict";l.r(t);var r=l(15),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,l=e._self._c||t;return l("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[l("h1",{attrs:{id:"快照读和当前读区别"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#快照读和当前读区别"}},[e._v("#")]),e._v(" 快照读和当前读区别？")]),e._v(" "),l("p",[e._v("快照读（提高数据库的并发查询能力）：")]),e._v(" "),l("p",[e._v("像不加锁的select操作就是快照读，即不加锁的非阻塞读；快照读的前提是隔离级别不是串行级别，串行级别下的快照读会退化成当前读；之所以出现快照读的情况，是基于提高并发性能的考虑，快照读的实现是基于多版本并发控制，即MVCC,可以认为MVCC是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；既然是基于多版本，即快照读可能读到的并不一定是数据的最新版本，而有可能是之前的历史版本。")]),e._v(" "),l("p",[e._v("其实就是简单的select 操作。形如：")]),e._v(" "),l("ul",[l("li",[e._v("select * from table where ?")])]),e._v(" "),l("p",[e._v("当前读：")]),e._v(" "),l("p",[e._v("像select lock in share mode(共享锁), select for update ; update, insert ,delete(排他锁)这些操作都是一种当前读，为什么叫当前读？就是它读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。如下：")]),e._v(" "),l("ul",[l("li",[l("p",[e._v("select * from table where ? lock in share mode -- 共享锁")])]),e._v(" "),l("li",[l("p",[e._v("select * from table where ? for update -- 排他锁")])]),e._v(" "),l("li",[l("p",[e._v("insert into table values(?)")])]),e._v(" "),l("li",[l("p",[e._v("update table set ? where ?")])]),e._v(" "),l("li",[l("p",[e._v("delete from table where ?")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);