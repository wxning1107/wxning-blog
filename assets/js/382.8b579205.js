(window.webpackJsonp=window.webpackJsonp||[]).push([[382],{1264:function(v,_,T){"use strict";T.r(_);var t=T(15),p=Object(t.a)({},(function(){var v=this,_=v.$createElement,T=v._self._c||_;return T("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[T("h1",{attrs:{id:"http协议优缺点"}},[T("a",{staticClass:"header-anchor",attrs:{href:"#http协议优缺点"}},[v._v("#")]),v._v(" HTTP协议优缺点")]),v._v(" "),T("p",[T("font",{attrs:{size:"5"}},[T("strong",[v._v("http协议特点")])])],1),v._v(" "),T("p",[T("strong",[v._v("1.灵活可扩展")])]),v._v(" "),T("p",[v._v("HTTP 协议最初诞生的时候就比较简单，本着开放的精神只规定了报文的基本格式，比如用空格分隔单词，用换行分隔字段，“header+body”等，报文里的各个组成部分都没有做严格的语法语义限制，可以由开发者任意定制。")]),v._v(" "),T("p",[v._v("所以，HTTP 协议就随着互联网的发展一同成长起来了。在这个过程中，HTTP 协议逐渐增加了请求方法、版本号、状态码、头字段等特性。而 body 也不再限于文本形式的 TXT 或 HTML，而是能够传输图片、音频视频等任意数据，这些都是源于它的“灵活可扩展”的特点。")]),v._v(" "),T("p",[T("strong",[v._v("2.可靠传输")])]),v._v(" "),T("p",[v._v("因为 HTTP 协议是基于 TCP/IP 的，而 TCP 本身是一个“可靠”的传输协议，所以 HTTP 自然也就继承了这个特性，它的具体做法与 TCP/UDP 差不多，都是对实际传输的数据（entity）做了一层包装，加上一个头，然后调用 Socket API，通过 TCP/IP 协议栈发送或者接收。")]),v._v(" "),T("p",[T("strong",[v._v("3.应用层协议")])]),v._v(" "),T("p",[v._v("在 TCP/IP 诞生后的几十年里，虽然出现了许多的应用层协议，但它们都仅关注很小的应用领域，局限在很少的应用场景。例如 FTP 只能传输文件、SMTP 只能发送邮件、SSH 只能远程登录等，在通用的数据传输方面“完全不能打”。")]),v._v(" "),T("p",[v._v("所以 HTTP 凭借着可携带任意头字段和实体数据的报文结构，以及连接控制、缓存代理等方便易用的特性，一出现就“技压群雄”，迅速成为了应用层里的“明星”协议。只要不太苛求性能，HTTP 几乎可以传递一切东西，满足各种需求，称得上是一个“万能”的协议。")]),v._v(" "),T("p",[T("strong",[v._v("4.请求-应答")])]),v._v(" "),T("p",[v._v("HTTP 协议使用的是请求 - 应答通信模式。请求 - 应答模式也明确了 HTTP 协议里通信双方的定位，永远是请求方先发起连接和请求，是主动的，而应答方只有在收到请求后才能答复，是被动的，如果没有请求时不会有任何动作。")]),v._v(" "),T("p",[T("strong",[v._v("5.无状态")])]),v._v(" "),T("p",[v._v("HTTP 协议是无状态的。“状态”其实就是客户端或者服务器里保存的一些数据或者标志，记录了通信过程中的一些变化信息。")]),v._v(" "),T("p",[v._v("你一定知道，TCP 协议是有状态的，一开始处于 CLOSED 状态，连接成功后是 ESTABLISHED 状态，断开连接后是 FIN-WAIT 状态，最后又是 CLOSED 状态。这些“状态”就需要 TCP 在内部用一些数据结构去维护，可以简单地想象成是个标志量，标记当前所处的状态，例如 0 是 CLOSED，2 是 ESTABLISHED 等等。")]),v._v(" "),T("p",[v._v("再来看 HTTP，在整个协议里没有规定任何的“状态”，客户端和服务器永远是处在一种“无知”的状态。建立连接前两者互不知情，每次收发的报文也都是互相独立的，没有任何的联系。收发报文也不会对客户端或服务器产生任何影响，连接后也不会要求保存任何信息。")]),v._v(" "),T("p",[T("font",{attrs:{size:"5"}},[T("strong",[v._v("http1.1协议优缺点")])])],1),v._v(" "),T("p",[T("strong",[v._v("简单、灵活、易于扩展")])]),v._v(" "),T("p",[v._v("HTTP 协议是很“简单”的，基本的报文格式就是“header+body”。")]),v._v(" "),T("p",[v._v("“灵活、易于扩展”的特性体现在 HTTP 协议里的请求方法、URI、状态码、原因短语、头字段等每一个核心组成要素都没有被“写死”，允许开发者任意定制、扩充或解释，给予了浏览器和服务器最大程度的信任和自由。")]),v._v(" "),T("p",[v._v("“灵活、易于扩展”的特性还表现在 HTTP 对“可靠传输”的定义上，它不限制具体的下层协议，不仅可以使用 TCP、UNIX Domain Socket，还可以使用 SSL/TLS，甚至是基于 UDP 的 QUIC，下层可以随意变化，而上层的语义则始终保持稳定。")]),v._v(" "),T("p",[T("strong",[v._v("应用广泛、环境成熟")])]),v._v(" "),T("p",[T("strong",[v._v("无状态")])]),v._v(" "),T("p",[v._v("“无状态”有什么好处呢？")]),v._v(" "),T("p",[v._v("因为服务器没有“记忆能力”，所以就不需要额外的资源来记录状态信息，不仅实现上会简单一些，而且还能减轻服务器的负担，能够把更多的 CPU 和内存用来对外提供服务。")]),v._v(" "),T("p",[v._v("而且，“无状态”也表示服务器都是相同的，没有“状态”的差异，所以可以很容易地组成集群，让负载均衡把请求转发到任意一台服务器，不会因为状态不一致导致处理出错，使用“堆机器”的“笨办法”轻松实现高并发高可用。")]),v._v(" "),T("p",[v._v("那么，“无状态”又有什么坏处呢？")]),v._v(" "),T("p",[v._v("既然服务器没有“记忆能力”，它就无法支持需要连续多个步骤的“事务”操作。例如电商购物，首先要登录，然后添加购物车，再下单、结算、支付，这一系列操作都需要知道用户的身份才行，但“无状态”服务器是不知道这些请求是相互关联的，每次都得问一遍身份信息，不仅麻烦，而且还增加了不必要的数据传输量。")]),v._v(" "),T("p",[T("strong",[v._v("明文传输")])]),v._v(" "),T("p",[v._v("“明文”意思就是协议里的报文（准确地说是 header 部分）不使用二进制数据，而是用简单可阅读的文本形式。")]),v._v(" "),T("p",[T("strong",[v._v("不安全")])]),v._v(" "),T("p",[v._v("安全有很多的方面，明文只是“机密”方面的一个缺点，在“身份认证”和“完整性校验”这两方面 HTTP 也是欠缺的。")]),v._v(" "),T("p",[v._v("HTTP 没有提供有效的手段来确认通信双方的真实身份。虽然协议里有一个基本的认证机制，但因为刚才所说的明文传输缺点，这个机制几乎可以说是“纸糊的”，非常容易被攻破。")]),v._v(" "),T("p",[v._v("HTTP 协议也不支持“完整性校验”，数据在传输过程中容易被窜改而无法验证真伪。")]),v._v(" "),T("p",[v._v("比如，你收到了一条银行用 HTTP 发来的消息：“小明向你转账一百元”，你无法知道小明是否真的就只转了一百元，也许他转了一千元或者五十元，但被黑客窜改成了一百元，真实情况到底是什么样子 HTTP 协议没有办法给你答案。")]),v._v(" "),T("p",[v._v("为了解决 HTTP 不安全的缺点，所以就出现了 HTTPS。")]),v._v(" "),T("p",[T("strong",[v._v("性能")])]),v._v(" "),T("p",[v._v("HTTP 的性能，可以用六个字来概括：“不算差，不够好”。")]),v._v(" "),T("p",[v._v("HTTP 协议基于 TCP/IP，并且使用了“请求 - 应答”的通信模式。而“请求 - 应答”模式则加剧了 HTTP 的性能问题，这就是著名的“队头阻塞”（Head-of-line blocking），当顺序发送的请求序列中的一个请求因为某种原因被阻塞时，在后面排队的所有请求也一并被阻塞，会导致客户端迟迟收不到数据。")]),v._v(" "),T("p",[v._v("为了解决这个问题，就诞生出了一个专门的研究课题“Web 性能优化”，HTTP 官方标准里就有“缓存”一章（RFC7234），非官方的“花招”就更多了，例如切图、数据内嵌与合并，域名分片、JavaScript“黑科技”等等。")]),v._v(" "),T("p",[v._v("不过现在已经有了终极解决方案：HTTP/2 和 HTTP/3。")])])}),[],!1,null,null,null);_.default=p.exports}}]);